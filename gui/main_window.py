"""
Fen√™tre principale de l'application de compensation altim√©trique.
Interface utilisateur avec assistant √©tape par √©tape.
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import filedialog, messagebox
import sys
import os
from pathlib import Path
from typing import Optional, Dict, Any

# Ajouter le r√©pertoire parent au path pour les imports
current_dir = os.path.dirname(__file__)
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

from gui.utils.theme import AppTheme
from gui.components.base_components import (
    ThemedButton, ThemedLabel, ThemedFrame, StepIndicator, 
    StatusBar, FileDropFrame, ThemedEntry, ThemedProgressBar
)

# Import des modules backend
try:
    from src.data_importer import DataImporter
    from src.calculator import LevelingCalculator
    from src.compensator import LevelingCompensator
    from src.atmospheric_corrections import create_standard_conditions
except ImportError as e:
    print(f"Erreur import backend: {e}")
    # Fallback si les modules backend ne sont pas trouv√©s
    DataImporter = None
    LevelingCalculator = None
    LevelingCompensator = None


class MainApplication(ctk.CTk):
    """Application principale de compensation altim√©trique."""
    
    def __init__(self):
        super().__init__()
        
        # Configuration de base
        self.title("Syst√®me de Compensation Altim√©trique")
        self.geometry("900x600")  # Taille plus petite pour √©viter les probl√®mes X11
        self.minsize(800, 500)
        
        # Appliquer le th√®me
        AppTheme.apply_theme()
        self.configure(fg_color=AppTheme.COLORS['background'])
        
        # Variables d'√©tat
        self.current_step = 0
        self.imported_data = None
        self.calculation_results = None
        self.compensation_results = None
        
        # Configuration par d√©faut
        self.config = {
            'precision_mm': 2.0,
            'initial_altitude': None,
            'final_altitude': None,
            'atmospheric_corrections': True,
            'temperature': 25.0,
            'pressure': 1010.0,
            'humidity': 60.0
        }
        
        # Initialisation de l'interface
        self.create_widgets()
        self.center_window()
        
        # Modules backend
        self.data_importer = DataImporter()
        self.calculator = None
        self.compensator = None
    
    def center_window(self):
        """Centre la fen√™tre sur l'√©cran."""
        self.update_idletasks()
        x = (self.winfo_screenwidth() // 2) - (self.winfo_width() // 2)
        y = (self.winfo_screenheight() // 2) - (self.winfo_height() // 2)
        self.geometry(f"+{x}+{y}")
    
    def create_widgets(self):
        """Cr√©e l'interface utilisateur."""
        
        # En-t√™te avec titre et indicateur d'√©tapes
        self.create_header()
        
        # Zone principale (contenu variable selon l'√©tape)
        self.main_frame = ThemedFrame(self)
        self.main_frame.pack(fill='both', expand=True, padx=AppTheme.SPACING['lg'], 
                           pady=(0, AppTheme.SPACING['lg']))
        
        # Barre d'√©tat
        self.status_bar = StatusBar(self)
        self.status_bar.pack(side='bottom', fill='x')
        
        # Afficher la premi√®re √©tape
        self.show_step()
    
    def create_header(self):
        """Cr√©e l'en-t√™te avec titre et indicateur d'√©tapes."""
        
        # Frame d'en-t√™te
        header_frame = ThemedFrame(self)
        header_frame.pack(fill='x', padx=AppTheme.SPACING['lg'], 
                         pady=AppTheme.SPACING['lg'])
        
        # Titre principal
        title_label = ThemedLabel(
            header_frame,
            text="üéØ Syst√®me de Compensation Altim√©trique",
            style='title',
            text_color=AppTheme.COLORS['primary']
        )
        title_label.pack(pady=(AppTheme.SPACING['lg'], AppTheme.SPACING['md']))
        
        # Sous-titre
        subtitle_label = ThemedLabel(
            header_frame,
            text="Assistant de compensation par moindres carr√©s - Pr√©cision 2mm",
            style='body',
            text_color=AppTheme.COLORS['text_secondary']
        )
        subtitle_label.pack(pady=(0, AppTheme.SPACING['lg']))
        
        # Indicateur d'√©tapes
        steps = [
            "Import\\nDonn√©es", 
            "Configuration\\nParam√®tres", 
            "Calculs\\nPr√©liminaires", 
            "Compensation\\nLSQ", 
            "R√©sultats\\nRapports"
        ]
        
        self.step_indicator = StepIndicator(
            header_frame, 
            steps=steps, 
            current_step=self.current_step
        )
        self.step_indicator.pack(pady=AppTheme.SPACING['md'])
    
    def show_step(self):
        """Affiche l'√©tape courante."""
        
        # Vider le frame principal
        for widget in self.main_frame.winfo_children():
            widget.destroy()
        
        # Afficher l'√©tape appropri√©e
        if self.current_step == 0:
            self.show_import_step()
        elif self.current_step == 1:
            self.show_config_step()
        elif self.current_step == 2:
            self.show_calculation_step()
        elif self.current_step == 3:
            self.show_compensation_step()
        elif self.current_step == 4:
            self.show_results_step()
        
        # Mettre √† jour l'indicateur d'√©tapes
        self.step_indicator.update_step(self.current_step)
        
        # Mettre √† jour la barre d'√©tat
        step_names = ["Import des donn√©es", "Configuration", "Calculs", "Compensation", "R√©sultats"]
        self.status_bar.set_status(f"√âtape {self.current_step + 1}/5 - {step_names[self.current_step]}")
    
    def show_import_step(self):
        """√âtape 1: Import des donn√©es."""
        
        # Titre de l'√©tape
        step_title = ThemedLabel(
            self.main_frame,
            text="üìÅ Import des Donn√©es de Nivellement",
            style='heading',
            text_color=AppTheme.COLORS['secondary']
        )
        step_title.pack(pady=(AppTheme.SPACING['lg'], AppTheme.SPACING['md']))
        
        # Description
        desc_text = """
S√©lectionnez votre fichier Excel (.xlsx, .xls) ou CSV contenant les donn√©es de nivellement.
Le fichier doit contenir les colonnes : Matricule, AR (lectures arri√®re), AV (lectures avant), et optionnellement les distances.
        """
        
        desc_label = ThemedLabel(
            self.main_frame,
            text=desc_text.strip(),
            style='body'
        )
        desc_label.pack(pady=(0, AppTheme.SPACING['lg']))
        
        # Zone de glisser-d√©poser / s√©lection de fichier
        self.file_drop = FileDropFrame(
            self.main_frame,
            callback=self.select_file
        )
        self.file_drop.pack(fill='x', pady=AppTheme.SPACING['lg'])
        
        # Frame pour les informations du fichier
        self.file_info_frame = ThemedFrame(self.main_frame)
        
        # Boutons de navigation
        nav_frame = ctk.CTkFrame(self.main_frame, fg_color='transparent')
        nav_frame.pack(side='bottom', fill='x', pady=AppTheme.SPACING['lg'])
        
        # Bouton Suivant (d√©sactiv√© initialement)
        self.next_button = ThemedButton(
            nav_frame,
            text="Suivant ‚Üí",
            command=self.next_step,
            variant='primary'
        )
        self.next_button.pack(side='right')
        self.next_button.configure(state='disabled')
    
    def show_config_step(self):
        """√âtape 2: Configuration des param√®tres."""
        
        # Titre de l'√©tape
        step_title = ThemedLabel(
            self.main_frame,
            text="‚öôÔ∏è Configuration des Param√®tres",
            style='heading',
            text_color=AppTheme.COLORS['secondary']
        )
        step_title.pack(pady=(AppTheme.SPACING['lg'], AppTheme.SPACING['md']))
        
        # Frame d√©filable pour les param√®tres
        config_frame = ctk.CTkScrollableFrame(self.main_frame)
        config_frame.pack(fill='both', expand=True, pady=AppTheme.SPACING['md'])
        
        # Param√®tres de base
        self.create_basic_config(config_frame)
        
        # Param√®tres atmosph√©riques
        self.create_atmospheric_config(config_frame)
        
        # Boutons de navigation
        nav_frame = ctk.CTkFrame(self.main_frame, fg_color='transparent')
        nav_frame.pack(side='bottom', fill='x', pady=AppTheme.SPACING['lg'])
        
        ThemedButton(
            nav_frame,
            text="‚Üê Pr√©c√©dent",
            command=self.previous_step,
            variant='outline'
        ).pack(side='left')
        
        self.config_next_button = ThemedButton(
            nav_frame,
            text="Suivant ‚Üí",
            command=self.next_step,
            variant='primary'
        )
        self.config_next_button.pack(side='right')
    
    def create_basic_config(self, parent):
        """Cr√©e la section des param√®tres de base."""
        
        # Section Altitudes
        alt_section = ThemedFrame(parent)
        alt_section.pack(fill='x', pady=AppTheme.SPACING['md'])
        
        ThemedLabel(
            alt_section,
            text="üèîÔ∏è Altitudes de R√©f√©rence",
            style='subheading'
        ).pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
        
        # Altitude initiale
        alt_init_frame = ctk.CTkFrame(alt_section, fg_color='transparent')
        alt_init_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        
        ThemedLabel(alt_init_frame, text="Altitude initiale (m):").pack(side='left')
        self.initial_alt_entry = ThemedEntry(
            alt_init_frame,
            placeholder="Ex: 125.456",
            width=120
        )
        self.initial_alt_entry.pack(side='right')
        
        # Altitude finale (optionnelle)
        alt_final_frame = ctk.CTkFrame(alt_section, fg_color='transparent')
        alt_final_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        
        ThemedLabel(alt_final_frame, text="Altitude finale (optionnel):").pack(side='left')
        self.final_alt_entry = ThemedEntry(
            alt_final_frame,
            placeholder="Pour cheminement ouvert",
            width=120
        )
        self.final_alt_entry.pack(side='right')
        
        # Section Pr√©cision
        precision_section = ThemedFrame(parent)
        precision_section.pack(fill='x', pady=AppTheme.SPACING['md'])
        
        ThemedLabel(
            precision_section,
            text="üéØ Param√®tres de Pr√©cision",
            style='subheading'
        ).pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
        
        # Pr√©cision cible
        precision_frame = ctk.CTkFrame(precision_section, fg_color='transparent')
        precision_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        
        ThemedLabel(precision_frame, text="Pr√©cision cible (mm):").pack(side='left')
        self.precision_entry = ThemedEntry(
            precision_frame,
            placeholder="2.0",
            width=80
        )
        self.precision_entry.insert(0, "2.0")
        self.precision_entry.pack(side='right')
    
    def create_atmospheric_config(self, parent):
        """Cr√©e la section des corrections atmosph√©riques."""
        
        atm_section = ThemedFrame(parent)
        atm_section.pack(fill='x', pady=AppTheme.SPACING['md'])
        
        ThemedLabel(
            atm_section,
            text="üå°Ô∏è Corrections Atmosph√©riques",
            style='subheading'
        ).pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
        
        # Activer/d√©sactiver les corrections
        self.atm_checkbox = ctk.CTkCheckBox(
            atm_section,
            text="Appliquer les corrections atmosph√©riques",
            font=AppTheme.FONTS['body'],
            text_color=AppTheme.COLORS['text'],
            fg_color=AppTheme.COLORS['primary'],
            hover_color=AppTheme.COLORS['primary_dark'],
            command=self.toggle_atmospheric_config
        )
        self.atm_checkbox.pack(anchor='w', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        self.atm_checkbox.select()  # Activ√© par d√©faut
        
        # Frame pour les param√®tres atmosph√©riques
        self.atm_params_frame = ctk.CTkFrame(atm_section, fg_color='transparent')
        self.atm_params_frame.pack(fill='x', padx=AppTheme.SPACING['lg'], pady=AppTheme.SPACING['sm'])
        
        # Temp√©rature
        temp_frame = ctk.CTkFrame(self.atm_params_frame, fg_color='transparent')
        temp_frame.pack(fill='x', pady=AppTheme.SPACING['xs'])
        
        ThemedLabel(temp_frame, text="Temp√©rature (¬∞C):").pack(side='left')
        self.temp_entry = ThemedEntry(temp_frame, placeholder="25.0", width=80)
        self.temp_entry.insert(0, "25.0")
        self.temp_entry.pack(side='right')
        
        # Pression
        pressure_frame = ctk.CTkFrame(self.atm_params_frame, fg_color='transparent')
        pressure_frame.pack(fill='x', pady=AppTheme.SPACING['xs'])
        
        ThemedLabel(pressure_frame, text="Pression (hPa):").pack(side='left')
        self.pressure_entry = ThemedEntry(pressure_frame, placeholder="1010.0", width=80)
        self.pressure_entry.insert(0, "1010.0")
        self.pressure_entry.pack(side='right')
        
        # Humidit√©
        humidity_frame = ctk.CTkFrame(self.atm_params_frame, fg_color='transparent')
        humidity_frame.pack(fill='x', pady=AppTheme.SPACING['xs'])
        
        ThemedLabel(humidity_frame, text="Humidit√© (%):").pack(side='left')
        self.humidity_entry = ThemedEntry(humidity_frame, placeholder="60.0", width=80)
        self.humidity_entry.insert(0, "60.0")
        self.humidity_entry.pack(side='right')
    
    def show_calculation_step(self):
        """√âtape 3: Calculs pr√©liminaires."""
        
        # Titre de l'√©tape
        step_title = ThemedLabel(
            self.main_frame,
            text="üîß Calculs Pr√©liminaires",
            style='heading',
            text_color=AppTheme.COLORS['secondary']
        )
        step_title.pack(pady=(AppTheme.SPACING['lg'], AppTheme.SPACING['md']))
        
        # Description
        desc_text = """
Calcul des d√©nivel√©es, fermeture du cheminement et diagnostic des erreurs.
Les corrections atmosph√©riques seront appliqu√©es si configur√©es.
        """
        
        desc_label = ThemedLabel(
            self.main_frame,
            text=desc_text.strip(),
            style='body'
        )
        desc_label.pack(pady=(0, AppTheme.SPACING['lg']))
        
        # Frame principal pour les calculs
        calc_frame = ThemedFrame(self.main_frame)
        calc_frame.pack(fill='both', expand=True, pady=AppTheme.SPACING['md'])
        
        # Zone de progression
        progress_section = ThemedFrame(calc_frame)
        progress_section.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        ThemedLabel(
            progress_section,
            text="üìä Progression des Calculs",
            style='subheading'
        ).pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
        
        # Barre de progression
        self.calc_progress = ThemedProgressBar(progress_section)
        self.calc_progress.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        
        # Statut des calculs
        self.calc_status_label = ThemedLabel(
            progress_section,
            text="Pr√™t √† calculer...",
            style='small',
            text_color=AppTheme.COLORS['text_secondary']
        )
        self.calc_status_label.pack(anchor='w', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        
        # Zone des r√©sultats
        self.results_section = ThemedFrame(calc_frame)
        self.results_section.pack(fill='both', expand=True, padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        # Bouton de calcul
        calc_button_frame = ctk.CTkFrame(calc_frame, fg_color='transparent')
        calc_button_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        self.calc_button = ThemedButton(
            calc_button_frame,
            text="üöÄ Lancer les Calculs",
            command=self.run_calculations,
            variant='primary',
            width=200
        )
        self.calc_button.pack()
        
        # Boutons de navigation
        nav_frame = ctk.CTkFrame(self.main_frame, fg_color='transparent')
        nav_frame.pack(side='bottom', fill='x', pady=AppTheme.SPACING['lg'])
        
        ThemedButton(nav_frame, text="‚Üê Pr√©c√©dent", command=self.previous_step, variant='outline').pack(side='left')
        
        self.calc_next_button = ThemedButton(
            nav_frame,
            text="Suivant ‚Üí",
            command=self.next_step,
            variant='primary'
        )
        self.calc_next_button.pack(side='right')
        self.calc_next_button.configure(state='disabled')  # Activ√© apr√®s calculs
    
    def show_compensation_step(self):
        """√âtape 4: Compensation par moindres carr√©s."""
        
        # Titre de l'√©tape
        step_title = ThemedLabel(
            self.main_frame,
            text="üìä Compensation par Moindres Carr√©s",
            style='heading',
            text_color=AppTheme.COLORS['secondary']
        )
        step_title.pack(pady=(AppTheme.SPACING['lg'], AppTheme.SPACING['md']))
        
        # Description
        desc_text = """
Application de la m√©thode des moindres carr√©s pour distribuer optimalement l'erreur de fermeture.
Cette √©tape am√©liore la pr√©cision et fournit les altitudes compens√©es finales.
        """
        
        desc_label = ThemedLabel(
            self.main_frame,
            text=desc_text.strip(),
            style='body'
        )
        desc_label.pack(pady=(0, AppTheme.SPACING['lg']))
        
        # Frame principal pour la compensation
        comp_frame = ThemedFrame(self.main_frame)
        comp_frame.pack(fill='both', expand=True, pady=AppTheme.SPACING['md'])
        
        # Param√®tres de compensation
        params_section = ThemedFrame(comp_frame)
        params_section.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        ThemedLabel(
            params_section,
            text="‚öôÔ∏è Param√®tres de Compensation",
            style='subheading'
        ).pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
        
        # M√©thode de pond√©ration
        weight_frame = ctk.CTkFrame(params_section, fg_color='transparent')
        weight_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        
        ThemedLabel(weight_frame, text="M√©thode de pond√©ration:").pack(side='left')
        
        self.weight_method = ctk.CTkOptionMenu(
            weight_frame,
            values=["Distance inverse", "Distance inverse au carr√©", "Uniforme"],
            font=AppTheme.FONTS['body'],
            fg_color=AppTheme.COLORS['surface'],
            button_color=AppTheme.COLORS['primary'],
            button_hover_color=AppTheme.COLORS['primary_dark'],
            dropdown_fg_color=AppTheme.COLORS['surface']
        )
        self.weight_method.set("Distance inverse")
        self.weight_method.pack(side='right')
        
        # Tol√©rance de convergence
        tolerance_frame = ctk.CTkFrame(params_section, fg_color='transparent')
        tolerance_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        
        ThemedLabel(tolerance_frame, text="Tol√©rance de convergence (mm):").pack(side='left')
        self.tolerance_entry = ThemedEntry(tolerance_frame, placeholder="0.1", width=80)
        self.tolerance_entry.insert(0, "0.1")
        self.tolerance_entry.pack(side='right')
        
        # Zone de progression
        progress_section = ThemedFrame(comp_frame)
        progress_section.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        ThemedLabel(
            progress_section,
            text="üìà Progression de la Compensation",
            style='subheading'
        ).pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
        
        # Barre de progression pour la compensation
        self.comp_progress = ThemedProgressBar(progress_section)
        self.comp_progress.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        
        # Statut de la compensation
        self.comp_status_label = ThemedLabel(
            progress_section,
            text="Pr√™t pour la compensation...",
            style='small',
            text_color=AppTheme.COLORS['text_secondary']
        )
        self.comp_status_label.pack(anchor='w', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        
        # Zone des r√©sultats de compensation
        self.comp_results_section = ThemedFrame(comp_frame)
        self.comp_results_section.pack(fill='both', expand=True, padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        # Bouton de compensation
        comp_button_frame = ctk.CTkFrame(comp_frame, fg_color='transparent')
        comp_button_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        self.comp_button = ThemedButton(
            comp_button_frame,
            text="üéØ Lancer la Compensation",
            command=self.run_compensation,
            variant='primary',
            width=200
        )
        self.comp_button.pack()
        
        # Boutons de navigation
        nav_frame = ctk.CTkFrame(self.main_frame, fg_color='transparent')
        nav_frame.pack(side='bottom', fill='x', pady=AppTheme.SPACING['lg'])
        
        ThemedButton(nav_frame, text="‚Üê Pr√©c√©dent", command=self.previous_step, variant='outline').pack(side='left')
        
        self.comp_next_button = ThemedButton(
            nav_frame,
            text="Suivant ‚Üí",
            command=self.next_step,
            variant='primary'
        )
        self.comp_next_button.pack(side='right')
        self.comp_next_button.configure(state='disabled')  # Activ√© apr√®s compensation
    
    def show_results_step(self):
        """√âtape 5: R√©sultats et rapports."""
        
        # Titre de l'√©tape
        step_title = ThemedLabel(
            self.main_frame,
            text="üìà R√©sultats et Rapports",
            style='heading',
            text_color=AppTheme.COLORS['secondary']
        )
        step_title.pack(pady=(AppTheme.SPACING['lg'], AppTheme.SPACING['md']))
        
        # Description
        desc_text = """
Visualisation des r√©sultats, g√©n√©ration de graphiques et export des rapports d√©taill√©s.
Tous les r√©sultats sont maintenant disponibles pour analyse et archivage.
        """
        
        desc_label = ThemedLabel(
            self.main_frame,
            text=desc_text.strip(),
            style='body'
        )
        desc_label.pack(pady=(0, AppTheme.SPACING['lg']))
        
        # Frame principal pour les r√©sultats
        results_frame = ThemedFrame(self.main_frame)
        results_frame.pack(fill='both', expand=True, pady=AppTheme.SPACING['md'])
        
        # R√©sum√© des r√©sultats
        if self.compensation_results:
            self.create_results_summary(results_frame)
        else:
            self.create_no_results_message(results_frame)
        
        # Actions disponibles
        actions_section = ThemedFrame(results_frame)
        actions_section.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        ThemedLabel(
            actions_section,
            text="üõ†Ô∏è Actions Disponibles",
            style='subheading'
        ).pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
        
        # Boutons d'action
        actions_frame = ctk.CTkFrame(actions_section, fg_color='transparent')
        actions_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
        
        # Premi√®re ligne d'actions
        actions_row1 = ctk.CTkFrame(actions_frame, fg_color='transparent')
        actions_row1.pack(fill='x', pady=AppTheme.SPACING['xs'])
        
        ThemedButton(
            actions_row1,
            text="üìä G√©n√©rer Graphiques",
            command=self.generate_charts,
            variant='primary',
            width=180
        ).pack(side='left', padx=(0, AppTheme.SPACING['sm']))
        
        ThemedButton(
            actions_row1,
            text="üìÑ Rapport D√©taill√©",
            command=self.generate_detailed_report,
            variant='outline',
            width=180
        ).pack(side='left', padx=(0, AppTheme.SPACING['sm']))
        
        ThemedButton(
            actions_row1,
            text="üíæ Exporter CSV",
            command=self.export_csv,
            variant='outline',
            width=180
        ).pack(side='left')
        
        # Deuxi√®me ligne d'actions
        actions_row2 = ctk.CTkFrame(actions_frame, fg_color='transparent')
        actions_row2.pack(fill='x', pady=AppTheme.SPACING['xs'])
        
        ThemedButton(
            actions_row2,
            text="üóÇÔ∏è Ouvrir Dossier",
            command=self.open_results_folder,
            variant='ghost',
            width=180
        ).pack(side='left', padx=(0, AppTheme.SPACING['sm']))
        
        ThemedButton(
            actions_row2,
            text="üîÑ Nouveau Projet",
            command=self.new_project,
            variant='ghost',
            width=180
        ).pack(side='left')
        
        # Zone de statut des actions
        self.results_status_frame = ThemedFrame(results_frame)
        self.results_status_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        # Boutons de navigation
        nav_frame = ctk.CTkFrame(self.main_frame, fg_color='transparent')
        nav_frame.pack(side='bottom', fill='x', pady=AppTheme.SPACING['lg'])
        
        ThemedButton(nav_frame, text="‚Üê Pr√©c√©dent", command=self.previous_step, variant='outline').pack(side='left')
        ThemedButton(nav_frame, text="üéâ Terminer", command=self.finish, variant='primary').pack(side='right')
    
    def create_results_summary(self, parent):
        """Cr√©e le r√©sum√© des r√©sultats."""
        summary_section = ThemedFrame(parent)
        summary_section.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        ThemedLabel(
            summary_section,
            text="üéØ R√©sum√© des R√©sultats",
            style='subheading'
        ).pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
        
        # M√©triques cl√©s
        if isinstance(self.calculation_results, dict):
            # Mode d√©mo
            n_points = 5
            closure_error = self.calculation_results.get('closure_error', 0.003)
            precision = self.calculation_results.get('precision_achieved', 1.8)
        else:
            # Mode r√©el
            n_points = len(self.imported_data.dataframe) if self.imported_data else 0
            closure_error = abs(self.calculation_results.get('closure_error', 0.0))
            precision = self.calculation_results.get('precision_achieved', 2.0)
        
        sigma0 = self.compensation_results.get('sigma0', 0.0008)
        max_correction = self.compensation_results.get('precision_analysis', {}).get('max_correction', 0.0023)
        
        summary_text = f"""
‚úÖ Points trait√©s: {n_points}
üîí Erreur de fermeture: {closure_error:.3f} m ({closure_error*1000:.1f} mm)
üìä √âcart-type unitaire: {sigma0*1000:.1f} mm  
üîß Correction maximale: {max_correction*1000:.1f} mm
‚ö° Pr√©cision finale: {precision:.1f} mm
üéØ M√©thode: {self.compensation_results.get('weight_method', 'Distance inverse')}
        """
        
        summary_label = ThemedLabel(
            summary_section,
            text=summary_text.strip(),
            style='body',
            text_color=AppTheme.COLORS['text']
        )
        summary_label.pack(anchor='w', padx=AppTheme.SPACING['lg'], pady=AppTheme.SPACING['sm'])
        
        # Qualit√© globale
        if sigma0 < 0.001 and closure_error < 0.005:
            quality_color = AppTheme.COLORS['success']
            quality_text = "üåü Qualit√© Excellente - R√©sultats tr√®s fiables"
        elif sigma0 < 0.002 and closure_error < 0.010:
            quality_color = AppTheme.COLORS['success']  
            quality_text = "‚úÖ Qualit√© Bonne - R√©sultats satisfaisants"
        else:
            quality_color = AppTheme.COLORS['warning']
            quality_text = "‚ö†Ô∏è Qualit√© Acceptable - V√©rifier si n√©cessaire"
        
        quality_label = ThemedLabel(
            summary_section,
            text=quality_text,
            style='subheading',
            text_color=quality_color
        )
        quality_label.pack(anchor='w', padx=AppTheme.SPACING['lg'], pady=AppTheme.SPACING['sm'])
    
    def create_no_results_message(self, parent):
        """Affiche un message si aucun r√©sultat n'est disponible."""
        message_frame = ThemedFrame(parent)
        message_frame.pack(fill='both', expand=True, padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
        
        ThemedLabel(
            message_frame,
            text="‚ö†Ô∏è Aucun R√©sultat Disponible",
            style='heading',
            text_color=AppTheme.COLORS['warning']
        ).pack(pady=AppTheme.SPACING['xl'])
        
        ThemedLabel(
            message_frame,
            text="Vous devez compl√©ter les √©tapes pr√©c√©dentes pour g√©n√©rer des r√©sultats.",
            style='body'
        ).pack(pady=AppTheme.SPACING['md'])
    
    # M√©thodes de navigation
    def next_step(self):
        """Passe √† l'√©tape suivante."""
        if self.current_step < 4:
            if self.validate_current_step():
                self.current_step += 1
                self.show_step()
    
    def previous_step(self):
        """Revient √† l'√©tape pr√©c√©dente."""
        if self.current_step > 0:
            self.current_step -= 1
            self.show_step()
    
    def validate_current_step(self) -> bool:
        """Valide l'√©tape courante avant de continuer."""
        if self.current_step == 0:
            return self.imported_data is not None
        elif self.current_step == 1:
            return self.validate_config()
        elif self.current_step == 2:
            return self.calculation_results is not None
        elif self.current_step == 3:
            return self.compensation_results is not None
        return True
    
    def validate_config(self) -> bool:
        """Valide la configuration."""
        try:
            # Validation de l'altitude initiale
            initial_alt = float(self.initial_alt_entry.get())
            
            # Validation de la pr√©cision
            precision = float(self.precision_entry.get())
            
            # Sauvegarder la configuration
            self.config['initial_altitude'] = initial_alt
            self.config['precision_mm'] = precision
            
            final_alt_text = self.final_alt_entry.get().strip()
            if final_alt_text:
                self.config['final_altitude'] = float(final_alt_text)
            
            if self.atm_checkbox.get():
                self.config['temperature'] = float(self.temp_entry.get())
                self.config['pressure'] = float(self.pressure_entry.get())
                self.config['humidity'] = float(self.humidity_entry.get())
            
            return True
            
        except ValueError as e:
            messagebox.showerror("Erreur de Configuration", 
                               "Veuillez v√©rifier que tous les champs num√©riques sont correctement remplis.")
            return False
    
    # M√©thodes pour l'import de fichiers
    def select_file(self):
        """Ouvre le dialogue de s√©lection de fichier."""
        filetypes = [
            ("Fichiers Excel", "*.xlsx *.xls"),
            ("Fichiers CSV", "*.csv"),
            ("Tous les fichiers", "*.*")
        ]
        
        filename = filedialog.askopenfilename(
            title="S√©lectionner le fichier de donn√©es",
            filetypes=filetypes
        )
        
        if filename:
            self.load_file(filename)
    
    def load_file(self, filepath: str):
        """Charge et valide le fichier s√©lectionn√©."""
        try:
            if self.data_importer is None:
                # Mode d√©mo si les modules backend ne sont pas disponibles
                filename = Path(filepath).name
                self.file_drop.set_file_selected(filename)
                
                # Cr√©er des donn√©es factices pour la d√©mo
                self.imported_data = type('MockData', (), {
                    'dataframe': type('MockDF', (), {'__len__': lambda x: 10})(),
                    'ar_columns': ['AR_1', 'AR_2'],
                    'av_columns': ['AV_1', 'AV_2'],
                    'initial_point': 'P001',
                    'final_point': 'P010'
                })()
                
                self.show_file_info()
                self.next_button.configure(state='normal')
                return
            
            # Import du fichier r√©el
            self.imported_data = self.data_importer.import_file(filepath)
            
            # Mettre √† jour l'interface
            filename = Path(filepath).name
            self.file_drop.set_file_selected(filename)
            
            # Afficher les informations du fichier
            self.show_file_info()
            
            # Activer le bouton Suivant
            self.next_button.configure(state='normal')
            
        except Exception as e:
            messagebox.showerror("Erreur d'Import", f"Impossible de charger le fichier:\\n{str(e)}")
    
    def show_file_info(self):
        """Affiche les informations du fichier import√©."""
        if not self.imported_data:
            return
        
        self.file_info_frame.pack(fill='x', pady=AppTheme.SPACING['md'])
        
        # Vider le frame pr√©c√©dent
        for widget in self.file_info_frame.winfo_children():
            widget.destroy()
        
        # Titre
        info_title = ThemedLabel(
            self.file_info_frame,
            text="üìã Informations du Fichier",
            style='subheading'
        )
        info_title.pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
        
        # Informations
        df = self.imported_data.dataframe
        info_text = f"""
Points de mesure: {len(df)}
Colonnes AR d√©tect√©es: {len(self.imported_data.ar_columns)}
Colonnes AV d√©tect√©es: {len(self.imported_data.av_columns)}
Point initial: {self.imported_data.initial_point}
Point final: {self.imported_data.final_point}
Type de cheminement: {"Ferm√©" if self.imported_data.initial_point == self.imported_data.final_point else "Ouvert"}
        """
        
        info_label = ThemedLabel(
            self.file_info_frame,
            text=info_text.strip(),
            style='small',
            text_color=AppTheme.COLORS['text_secondary']
        )
        info_label.pack(anchor='w', padx=AppTheme.SPACING['lg'], pady=AppTheme.SPACING['sm'])
    
    def toggle_atmospheric_config(self):
        """Active/d√©sactive la configuration atmosph√©rique."""
        if self.atm_checkbox.get():
            self.atm_params_frame.pack(fill='x', padx=AppTheme.SPACING['lg'], pady=AppTheme.SPACING['sm'])
        else:
            self.atm_params_frame.pack_forget()
    
    def finish(self):
        """Termine l'assistant."""
        messagebox.showinfo("Termin√©", "Assistant termin√© avec succ√®s!")
    
    # M√©thodes de calcul
    def run_calculations(self):
        """Lance les calculs pr√©liminaires."""
        import threading
        
        # D√©sactiver le bouton pendant les calculs
        self.calc_button.configure(state='disabled')
        self.calc_progress.set(0)
        self.calc_status_label.configure(text="Initialisation des calculs...")
        
        # Vider la zone des r√©sultats
        for widget in self.results_section.winfo_children():
            widget.destroy()
        
        # Lancer les calculs dans un thread s√©par√©
        calc_thread = threading.Thread(target=self._perform_calculations)
        calc_thread.daemon = True
        calc_thread.start()
    
    def _perform_calculations(self):
        """Effectue les calculs dans un thread s√©par√©."""
        try:
            self.after(0, lambda: self.calc_status_label.configure(text="Chargement des donn√©es..."))
            self.after(0, lambda: self.calc_progress.set(0.1))
            
            # Cr√©er le calculateur
            if LevelingCalculator is None:
                # Mode d√©mo
                self._demo_calculations()
                return
            
            self.calculator = LevelingCalculator(
                data=self.imported_data.dataframe,
                initial_altitude=self.config['initial_altitude'],
                ar_columns=self.imported_data.ar_columns,
                av_columns=self.imported_data.av_columns
            )
            
            self.after(0, lambda: self.calc_status_label.configure(text="Calcul des d√©nivel√©es..."))
            self.after(0, lambda: self.calc_progress.set(0.3))
            
            # Calcul des d√©nivel√©es
            results = self.calculator.calculate_all()
            
            self.after(0, lambda: self.calc_status_label.configure(text="Application des corrections atmosph√©riques..."))
            self.after(0, lambda: self.calc_progress.set(0.6))
            
            # Appliquer les corrections atmosph√©riques si configur√©es
            if self.config.get('atmospheric_corrections', False):
                from src.atmospheric_corrections import AtmosphericCorrections
                
                atm_conditions = create_standard_conditions(
                    temperature=self.config['temperature'],
                    pressure=self.config['pressure'],
                    humidity=self.config['humidity']
                )
                
                atm_corrector = AtmosphericCorrections(atm_conditions)
                results = atm_corrector.apply_corrections(results)
            
            self.after(0, lambda: self.calc_status_label.configure(text="Calcul de la fermeture..."))
            self.after(0, lambda: self.calc_progress.set(0.8))
            
            # Calcul de la fermeture
            closure_error = self.calculator.calculate_closure()
            results['closure_error'] = closure_error
            
            self.after(0, lambda: self.calc_status_label.configure(text="Finalisation des r√©sultats..."))
            self.after(0, lambda: self.calc_progress.set(1.0))
            
            # Sauvegarder les r√©sultats
            self.calculation_results = results
            
            # Mettre √† jour l'interface dans le thread principal
            self.after(0, self._update_calculation_results)
            
        except Exception as e:
            self.after(0, lambda: self._handle_calculation_error(str(e)))
    
    def _demo_calculations(self):
        """Mode d√©mo pour les calculs."""
        import time
        
        # Simulation des √©tapes de calcul
        steps = [
            ("Chargement des donn√©es...", 0.2),
            ("Calcul des d√©nivel√©es...", 0.4),
            ("Application des corrections...", 0.6),
            ("Calcul de la fermeture...", 0.8),
            ("Finalisation...", 1.0)
        ]
        
        for step_text, progress in steps:
            self.after(0, lambda t=step_text, p=progress: self._update_demo_progress(t, p))
            time.sleep(0.5)
        
        # Cr√©er des r√©sultats de d√©mo
        demo_results = {
            'denivellees': [0.245, -0.123, 0.087, -0.234, 0.156],
            'closure_error': 0.003,
            'total_distance': 1250.0,
            'precision_achieved': 1.8,
            'atmospheric_corrections_applied': self.config.get('atmospheric_corrections', False)
        }
        
        self.calculation_results = demo_results
        self.after(0, self._update_calculation_results)
    
    def _update_demo_progress(self, text, progress):
        """Met √† jour la progression en mode d√©mo."""
        self.calc_status_label.configure(text=text)
        self.calc_progress.set(progress)
    
    def _update_calculation_results(self):
        """Met √† jour l'affichage des r√©sultats de calcul."""
        try:
            # Titre des r√©sultats
            results_title = ThemedLabel(
                self.results_section,
                text="üìã R√©sultats des Calculs",
                style='subheading'
            )
            results_title.pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
            
            # Frame pour les m√©triques
            metrics_frame = ctk.CTkFrame(self.results_section, fg_color='transparent')
            metrics_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
            
            # M√©triques principales
            if isinstance(self.calculation_results, dict):
                # Mode d√©mo
                closure = self.calculation_results.get('closure_error', 0.003)
                precision = self.calculation_results.get('precision_achieved', 1.8)
                distance = self.calculation_results.get('total_distance', 1250.0)
                n_points = 5
            else:
                # Mode r√©el
                closure = abs(self.calculation_results.get('closure_error', 0.0))
                precision = self.calculation_results.get('precision_achieved', 2.0)
                distance = self.calculation_results.get('total_distance', 0.0)
                n_points = len(self.calculation_results.get('denivellees', []))
            
            # Affichage des m√©triques
            metrics_text = f"""
üéØ Points de mesure: {n_points}
üìè Distance totale: {distance:.1f} m
üîí Erreur de fermeture: {closure:.3f} m
‚ö° Pr√©cision atteinte: {precision:.1f} mm
            """
            
            metrics_label = ThemedLabel(
                metrics_frame,
                text=metrics_text.strip(),
                style='small',
                text_color=AppTheme.COLORS['text']
            )
            metrics_label.pack(anchor='w')
            
            # Diagnostic de qualit√©
            quality_frame = ThemedFrame(self.results_section)
            quality_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
            
            ThemedLabel(
                quality_frame,
                text="üîç Diagnostic de Qualit√©",
                style='subheading'
            ).pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
            
            # √âvaluation de la qualit√©
            if closure < 0.005:
                quality_color = AppTheme.COLORS['success']
                quality_text = "‚úÖ Excellente qualit√© - Erreur de fermeture acceptable"
            elif closure < 0.010:
                quality_color = AppTheme.COLORS['warning']
                quality_text = "‚ö†Ô∏è Qualit√© correcte - Erreur de fermeture limite"
            else:
                quality_color = AppTheme.COLORS['error']
                quality_text = "‚ùå Qualit√© insuffisante - Erreur de fermeture trop √©lev√©e"
            
            quality_label = ThemedLabel(
                quality_frame,
                text=quality_text,
                style='body',
                text_color=quality_color
            )
            quality_label.pack(anchor='w', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
            
            # Statut final
            self.calc_status_label.configure(text="‚úÖ Calculs termin√©s avec succ√®s!")
            
            # R√©activer les boutons
            self.calc_button.configure(state='normal', text="üîÑ Recalculer")
            self.calc_next_button.configure(state='normal')
            
        except Exception as e:
            self._handle_calculation_error(f"Erreur lors de l'affichage des r√©sultats: {str(e)}")
    
    def _handle_calculation_error(self, error_message):
        """G√®re les erreurs de calcul."""
        self.calc_status_label.configure(text=f"‚ùå Erreur: {error_message}")
        self.calc_progress.set(0)
        self.calc_button.configure(state='normal')
        
        messagebox.showerror("Erreur de Calcul", f"Une erreur est survenue lors des calculs:\n\n{error_message}")
    
    # M√©thodes de compensation
    def run_compensation(self):
        """Lance la compensation par moindres carr√©s."""
        import threading
        
        if self.calculation_results is None:
            messagebox.showerror("Erreur", "Vous devez d'abord effectuer les calculs pr√©liminaires.")
            return
        
        # D√©sactiver le bouton pendant la compensation
        self.comp_button.configure(state='disabled')
        self.comp_progress.set(0)
        self.comp_status_label.configure(text="Initialisation de la compensation...")
        
        # Vider la zone des r√©sultats
        for widget in self.comp_results_section.winfo_children():
            widget.destroy()
        
        # Lancer la compensation dans un thread s√©par√©
        comp_thread = threading.Thread(target=self._perform_compensation)
        comp_thread.daemon = True
        comp_thread.start()
    
    def _perform_compensation(self):
        """Effectue la compensation dans un thread s√©par√©."""
        try:
            self.after(0, lambda: self.comp_status_label.configure(text="Pr√©paration des matrices..."))
            self.after(0, lambda: self.comp_progress.set(0.1))
            
            # Cr√©er le compensateur
            if LevelingCompensator is None:
                # Mode d√©mo
                self._demo_compensation()
                return
            
            # R√©cup√©rer les param√®tres de compensation
            weight_method = self.weight_method.get()
            tolerance = float(self.tolerance_entry.get())
            
            self.compensator = LevelingCompensator(
                calculation_results=self.calculation_results,
                weight_method=weight_method,
                tolerance=tolerance
            )
            
            self.after(0, lambda: self.comp_status_label.configure(text="Construction du syst√®me d'√©quations..."))
            self.after(0, lambda: self.comp_progress.set(0.3))
            
            # Construction du syst√®me d'√©quations
            A, P, f = self.compensator.build_system()
            
            self.after(0, lambda: self.comp_status_label.configure(text="R√©solution par moindres carr√©s..."))
            self.after(0, lambda: self.comp_progress.set(0.6))
            
            # R√©solution du syst√®me
            corrections, residuals, sigma0 = self.compensator.solve_system(A, P, f)
            
            self.after(0, lambda: self.comp_status_label.configure(text="Calcul des altitudes compens√©es..."))
            self.after(0, lambda: self.comp_progress.set(0.8))
            
            # Calcul des altitudes compens√©es
            compensated_altitudes = self.compensator.compute_compensated_altitudes(corrections)
            
            self.after(0, lambda: self.comp_status_label.configure(text="Analyse de la pr√©cision..."))
            self.after(0, lambda: self.comp_progress.set(0.9))
            
            # Analyse de la pr√©cision
            precision_analysis = self.compensator.analyze_precision(residuals, sigma0)
            
            self.after(0, lambda: self.comp_progress.set(1.0))
            
            # Sauvegarder les r√©sultats
            self.compensation_results = {
                'corrections': corrections,
                'residuals': residuals,
                'sigma0': sigma0,
                'compensated_altitudes': compensated_altitudes,
                'precision_analysis': precision_analysis,
                'weight_method': weight_method,
                'tolerance': tolerance
            }
            
            # Mettre √† jour l'interface dans le thread principal
            self.after(0, self._update_compensation_results)
            
        except Exception as e:
            self.after(0, lambda: self._handle_compensation_error(str(e)))
    
    def _demo_compensation(self):
        """Mode d√©mo pour la compensation."""
        import time
        import numpy as np
        
        # Simulation des √©tapes de compensation
        steps = [
            ("Pr√©paration des matrices...", 0.2),
            ("Construction du syst√®me...", 0.4),
            ("R√©solution LSQ...", 0.6),
            ("Calcul des altitudes...", 0.8),
            ("Analyse de pr√©cision...", 1.0)
        ]
        
        for step_text, progress in steps:
            self.after(0, lambda t=step_text, p=progress: self._update_comp_progress(t, p))
            time.sleep(0.4)
        
        # Cr√©er des r√©sultats de d√©mo
        n_points = 5
        demo_results = {
            'corrections': np.random.normal(0, 0.001, n_points),
            'residuals': np.random.normal(0, 0.0005, n_points),
            'sigma0': 0.0008,
            'compensated_altitudes': [125.456 + i*0.1 + np.random.normal(0, 0.001) for i in range(n_points)],
            'precision_analysis': {
                'std_dev': 0.0008,
                'max_correction': 0.0023,
                'rms_residuals': 0.0006,
                'chi_square': 2.45,
                'degrees_of_freedom': n_points - 1
            },
            'weight_method': self.weight_method.get(),
            'tolerance': float(self.tolerance_entry.get())
        }
        
        self.compensation_results = demo_results
        self.after(0, self._update_compensation_results)
    
    def _update_comp_progress(self, text, progress):
        """Met √† jour la progression de la compensation."""
        self.comp_status_label.configure(text=text)
        self.comp_progress.set(progress)
    
    def _update_compensation_results(self):
        """Met √† jour l'affichage des r√©sultats de compensation."""
        try:
            # Titre des r√©sultats
            results_title = ThemedLabel(
                self.comp_results_section,
                text="üéØ R√©sultats de la Compensation",
                style='subheading'
            )
            results_title.pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
            
            # M√©triques de compensation
            metrics_frame = ctk.CTkFrame(self.comp_results_section, fg_color='transparent')
            metrics_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
            
            # Extraction des r√©sultats
            sigma0 = self.compensation_results.get('sigma0', 0.0008)
            precision_analysis = self.compensation_results.get('precision_analysis', {})
            max_correction = precision_analysis.get('max_correction', 0.0023)
            rms_residuals = precision_analysis.get('rms_residuals', 0.0006)
            
            # Affichage des m√©triques
            metrics_text = f"""
üìä √âcart-type unitaire (œÉ‚ÇÄ): {sigma0*1000:.1f} mm
üîß Correction maximale: {max_correction*1000:.1f} mm
üìà RMS des r√©sidus: {rms_residuals*1000:.1f} mm
‚öôÔ∏è M√©thode de pond√©ration: {self.compensation_results.get('weight_method', 'Distance inverse')}
            """
            
            metrics_label = ThemedLabel(
                metrics_frame,
                text=metrics_text.strip(),
                style='small',
                text_color=AppTheme.COLORS['text']
            )
            metrics_label.pack(anchor='w')
            
            # Qualit√© de la compensation
            quality_frame = ThemedFrame(self.comp_results_section)
            quality_frame.pack(fill='x', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['md'])
            
            ThemedLabel(
                quality_frame,
                text="‚úÖ √âvaluation de la Compensation",
                style='subheading'
            ).pack(anchor='w', padx=AppTheme.SPACING['md'], pady=(AppTheme.SPACING['md'], AppTheme.SPACING['sm']))
            
            # √âvaluation de la qualit√©
            if sigma0 < 0.001:
                quality_color = AppTheme.COLORS['success']
                quality_text = "üåü Excellente qualit√© - Compensation tr√®s pr√©cise"
            elif sigma0 < 0.002:
                quality_color = AppTheme.COLORS['success']
                quality_text = "‚úÖ Bonne qualit√© - Compensation satisfaisante"
            elif sigma0 < 0.003:
                quality_color = AppTheme.COLORS['warning']
                quality_text = "‚ö†Ô∏è Qualit√© acceptable - V√©rifier les donn√©es"
            else:
                quality_color = AppTheme.COLORS['error']
                quality_text = "‚ùå Qualit√© insuffisante - R√©viser les mesures"
            
            quality_label = ThemedLabel(
                quality_frame,
                text=quality_text,
                style='body',
                text_color=quality_color
            )
            quality_label.pack(anchor='w', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])
            
            # Statut final
            self.comp_status_label.configure(text="‚úÖ Compensation termin√©e avec succ√®s!")
            
            # R√©activer les boutons
            self.comp_button.configure(state='normal', text="üîÑ Recompenser")
            self.comp_next_button.configure(state='normal')
            
        except Exception as e:
            self._handle_compensation_error(f"Erreur lors de l'affichage des r√©sultats: {str(e)}")
    
    def _handle_compensation_error(self, error_message):
        """G√®re les erreurs de compensation."""
        self.comp_status_label.configure(text=f"‚ùå Erreur: {error_message}")
        self.comp_progress.set(0)
        self.comp_button.configure(state='normal')
        
        messagebox.showerror("Erreur de Compensation", f"Une erreur est survenue lors de la compensation:\n\n{error_message}")
    
    # M√©thodes d'action pour les r√©sultats
    def generate_charts(self):
        """G√©n√®re les graphiques de visualisation."""
        try:
            from pathlib import Path
            import os
            
            # Cr√©er le dossier de sortie
            output_dir = Path("results_gui")
            output_dir.mkdir(exist_ok=True)
            
            self._show_action_status("üé® G√©n√©ration des graphiques en cours...")
            
            # Utiliser le visualizer si disponible
            try:
                from src.visualizer import LevelingVisualizer
                
                if self.calculation_results and self.compensation_results:
                    visualizer = LevelingVisualizer(
                        calculation_results=self.calculation_results,
                        compensation_results=self.compensation_results
                    )
                    
                    # G√©n√©rer tous les graphiques
                    chart_files = visualizer.create_complete_report(output_dir)
                    
                    self._show_action_status(f"‚úÖ Graphiques g√©n√©r√©s dans {output_dir}/")
                    messagebox.showinfo("Succ√®s", f"Graphiques g√©n√©r√©s avec succ√®s dans le dossier {output_dir}/")
                    
                else:
                    self._show_action_status("‚ö†Ô∏è Donn√©es insuffisantes pour g√©n√©rer les graphiques")
                    
            except ImportError:
                # Mode d√©mo - cr√©er des graphiques factices
                self._generate_demo_charts(output_dir)
                self._show_action_status(f"‚úÖ Graphiques de d√©mo g√©n√©r√©s dans {output_dir}/")
                messagebox.showinfo("Mode D√©mo", f"Graphiques de d√©monstration g√©n√©r√©s dans {output_dir}/")
                
        except Exception as e:
            self._show_action_status(f"‚ùå Erreur: {str(e)}")
            messagebox.showerror("Erreur", f"Erreur lors de la g√©n√©ration des graphiques:\n{str(e)}")
    
    def _generate_demo_charts(self, output_dir):
        """G√©n√®re des graphiques de d√©monstration."""
        import matplotlib.pyplot as plt
        import numpy as np
        
        # Configuration matplotlib pour les couleurs du th√®me
        plt.style.use('seaborn-v0_8-whitegrid' if 'seaborn-v0_8-whitegrid' in plt.style.available else 'default')
        
        # Graphique 1: Profil altim√©trique
        fig, ax = plt.subplots(figsize=(12, 6))
        distances = np.cumsum([0, 250, 300, 275, 425])
        altitudes = [125.456, 125.701, 125.578, 125.665, 125.821]
        
        ax.plot(distances, altitudes, 'o-', color='#7671FA', linewidth=2, markersize=8)
        ax.set_xlabel('Distance cumulative (m)')
        ax.set_ylabel('Altitude (m)')
        ax.set_title('Profil Altim√©trique - Cheminement de Nivellement')
        ax.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(output_dir / 'profil_altimetrique.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        # Graphique 2: R√©sidus de compensation
        fig, ax = plt.subplots(figsize=(10, 6))
        points = ['P001', 'P002', 'P003', 'P004', 'P005']
        residuals = np.random.normal(0, 0.0005, 5) * 1000  # en mm
        
        bars = ax.bar(points, residuals, color='#7671FA', alpha=0.7)
        ax.axhline(y=0, color='k', linestyle='-', alpha=0.3)
        ax.set_ylabel('R√©sidus (mm)')
        ax.set_title('R√©sidus de Compensation par Point')
        ax.grid(True, axis='y', alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(output_dir / 'residus_compensation.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        # Graphique 3: Analyse de pr√©cision
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
        
        # Histogramme des corrections
        corrections = np.random.normal(0, 0.001, 100) * 1000  # en mm
        ax1.hist(corrections, bins=20, color='#7671FA', alpha=0.7, edgecolor='black')
        ax1.set_xlabel('Corrections (mm)')
        ax1.set_ylabel('Fr√©quence')
        ax1.set_title('Distribution des Corrections')
        ax1.grid(True, alpha=0.3)
        
        # √âvolution de la pr√©cision
        iterations = np.arange(1, 11)
        precision = 2.5 * np.exp(-iterations/3) + 0.8
        ax2.plot(iterations, precision, 'o-', color='#07244C', linewidth=2, markersize=6)
        ax2.set_xlabel('It√©ration')
        ax2.set_ylabel('Pr√©cision (mm)')
        ax2.set_title('Convergence de la Compensation')
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(output_dir / 'analyse_precision.png', dpi=300, bbox_inches='tight')
        plt.close()
    
    def generate_detailed_report(self):
        """G√©n√®re un rapport d√©taill√©."""
        try:
            from pathlib import Path
            from datetime import datetime
            
            output_dir = Path("results_gui")
            output_dir.mkdir(exist_ok=True)
            
            self._show_action_status("üìÑ G√©n√©ration du rapport en cours...")
            
            # Cr√©er le rapport
            report_path = output_dir / f"rapport_compensation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write("RAPPORT DE COMPENSATION ALTIM√âTRIQUE\n")
                f.write("="*50 + "\n\n")
                f.write(f"Date de g√©n√©ration: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
                
                # Informations du projet
                f.write("INFORMATIONS DU PROJET\n")
                f.write("-" * 25 + "\n")
                if self.imported_data:
                    if hasattr(self.imported_data, 'dataframe'):
                        f.write(f"Nombre de points: {len(self.imported_data.dataframe)}\n")
                    else:
                        f.write("Nombre de points: 5 (d√©mo)\n")
                else:
                    f.write("Nombre de points: 5 (d√©mo)\n")
                
                f.write(f"Pr√©cision cible: {self.config.get('precision_mm', 2.0)} mm\n")
                f.write(f"Altitude initiale: {self.config.get('initial_altitude', 125.456)} m\n\n")
                
                # R√©sultats des calculs
                if self.calculation_results:
                    f.write("R√âSULTATS DES CALCULS PR√âLIMINAIRES\n")
                    f.write("-" * 35 + "\n")
                    if isinstance(self.calculation_results, dict):
                        closure = self.calculation_results.get('closure_error', 0.003)
                        f.write(f"Erreur de fermeture: {closure:.3f} m ({closure*1000:.1f} mm)\n")
                        f.write(f"Distance totale: {self.calculation_results.get('total_distance', 1250.0):.1f} m\n")
                    f.write("\n")
                
                # R√©sultats de la compensation
                if self.compensation_results:
                    f.write("R√âSULTATS DE LA COMPENSATION\n")
                    f.write("-" * 30 + "\n")
                    sigma0 = self.compensation_results.get('sigma0', 0.0008)
                    f.write(f"√âcart-type unitaire (œÉ‚ÇÄ): {sigma0*1000:.1f} mm\n")
                    f.write(f"M√©thode de pond√©ration: {self.compensation_results.get('weight_method', 'Distance inverse')}\n")
                    
                    precision_analysis = self.compensation_results.get('precision_analysis', {})
                    if precision_analysis:
                        f.write(f"Correction maximale: {precision_analysis.get('max_correction', 0.0023)*1000:.1f} mm\n")
                        f.write(f"RMS des r√©sidus: {precision_analysis.get('rms_residuals', 0.0006)*1000:.1f} mm\n")
                    f.write("\n")
                
                # √âvaluation de la qualit√©
                f.write("√âVALUATION DE LA QUALIT√â\n")
                f.write("-" * 25 + "\n")
                if self.compensation_results:
                    sigma0 = self.compensation_results.get('sigma0', 0.0008)
                    if sigma0 < 0.001:
                        f.write("Qualit√©: EXCELLENTE\n")
                    elif sigma0 < 0.002:
                        f.write("Qualit√©: BONNE\n")
                    else:
                        f.write("Qualit√©: ACCEPTABLE\n")
                
                f.write("\nRapport g√©n√©r√© par le Syst√®me de Compensation Altim√©trique\n")
            
            self._show_action_status(f"‚úÖ Rapport g√©n√©r√©: {report_path.name}")
            messagebox.showinfo("Succ√®s", f"Rapport d√©taill√© g√©n√©r√©:\n{report_path}")
            
        except Exception as e:
            self._show_action_status(f"‚ùå Erreur: {str(e)}")
            messagebox.showerror("Erreur", f"Erreur lors de la g√©n√©ration du rapport:\n{str(e)}")
    
    def export_csv(self):
        """Exporte les r√©sultats en CSV."""
        try:
            from pathlib import Path
            from datetime import datetime
            import csv
            
            if not self.compensation_results:
                messagebox.showerror("Erreur", "Aucun r√©sultat de compensation disponible pour l'export.")
                return
            
            output_dir = Path("results_gui")
            output_dir.mkdir(exist_ok=True)
            
            self._show_action_status("üíæ Export CSV en cours...")
            
            csv_path = output_dir / f"resultats_compensation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            with open(csv_path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f, delimiter=';')
                
                # En-t√™tes
                writer.writerow(['Point', 'Altitude_Compens√©e_m', 'Correction_mm', 'R√©sidu_mm'])
                
                # Donn√©es (mode d√©mo ou r√©el)
                if isinstance(self.compensation_results.get('compensated_altitudes'), list):
                    altitudes = self.compensation_results['compensated_altitudes']
                    corrections = self.compensation_results.get('corrections', [0]*len(altitudes))
                    residuals = self.compensation_results.get('residuals', [0]*len(altitudes))
                    
                    for i, (alt, corr, res) in enumerate(zip(altitudes, corrections, residuals)):
                        point_name = f"P{i+1:03d}"
                        writer.writerow([
                            point_name, 
                            f"{alt:.6f}", 
                            f"{corr*1000:.2f}", 
                            f"{res*1000:.2f}"
                        ])
            
            self._show_action_status(f"‚úÖ Export CSV r√©ussi: {csv_path.name}")
            messagebox.showinfo("Succ√®s", f"Export CSV r√©alis√©:\n{csv_path}")
            
        except Exception as e:
            self._show_action_status(f"‚ùå Erreur: {str(e)}")
            messagebox.showerror("Erreur", f"Erreur lors de l'export CSV:\n{str(e)}")
    
    def open_results_folder(self):
        """Ouvre le dossier des r√©sultats."""
        try:
            from pathlib import Path
            import subprocess
            import platform
            
            output_dir = Path("results_gui")
            output_dir.mkdir(exist_ok=True)
            
            # Ouvrir le dossier selon l'OS
            if platform.system() == "Windows":
                subprocess.run(["explorer", str(output_dir)])
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(["open", str(output_dir)])
            else:  # Linux
                subprocess.run(["xdg-open", str(output_dir)])
            
            self._show_action_status(f"üìÇ Dossier ouvert: {output_dir}")
            
        except Exception as e:
            self._show_action_status(f"‚ùå Erreur: {str(e)}")
            messagebox.showerror("Erreur", f"Impossible d'ouvrir le dossier:\n{str(e)}")
    
    def new_project(self):
        """D√©marre un nouveau projet."""
        response = messagebox.askyesno(
            "Nouveau Projet", 
            "√ätes-vous s√ªr de vouloir d√©marrer un nouveau projet?\nTous les r√©sultats actuels seront perdus."
        )
        
        if response:
            # R√©initialiser l'application
            self.current_step = 0
            self.imported_data = None
            self.calculation_results = None
            self.compensation_results = None
            
            # R√©initialiser la configuration
            self.config = {
                'precision_mm': 2.0,
                'initial_altitude': None,
                'final_altitude': None,
                'atmospheric_corrections': True,
                'temperature': 25.0,
                'pressure': 1010.0,
                'humidity': 60.0
            }
            
            # Retourner √† la premi√®re √©tape
            self.show_step()
            self._show_action_status("üîÑ Nouveau projet d√©marr√©")
    
    def _show_action_status(self, message):
        """Affiche un message de statut pour les actions."""
        # Vider le frame pr√©c√©dent
        for widget in self.results_status_frame.winfo_children():
            widget.destroy()
        
        status_label = ThemedLabel(
            self.results_status_frame,
            text=message,
            style='small',
            text_color=AppTheme.COLORS['text_secondary']
        )
        status_label.pack(anchor='w', padx=AppTheme.SPACING['md'], pady=AppTheme.SPACING['sm'])


def main():
    """Point d'entr√©e principal."""
    app = MainApplication()
    app.mainloop()


if __name__ == "__main__":
    main()