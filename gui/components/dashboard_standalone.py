"""
Dashboard standalone sans d√©pendances probl√©matiques.
Version simplifi√©e qui fonctionne sans matplotlib int√©gr√©.
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox
from typing import Dict, List, Optional, Any
from pathlib import Path
from datetime import datetime, timedelta
import json
import os

# Import des composants de base seulement
from .base_components import (
    ThemedButton, ThemedLabel, ThemedFrame, StatusCard, 
    ProgressCard, ProjectCard, ThemedEntry
)
from ..utils.theme import AppTheme


class StandaloneDashboard(ThemedFrame):
    """Dashboard standalone sans d√©pendances matplotlib."""
    
    def __init__(self, parent, callback=None, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.callback = callback
        self.projects_data = []
        self.current_project = None
        
        # Charger les donn√©es des projets
        self.load_projects_data()
        
        # Configuration responsive
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)
        
        # Cr√©er l'interface
        self.create_dashboard()
    
    def create_dashboard(self):
        """Cr√©e l'interface compl√®te du dashboard."""
        
        # Container principal avec scrolling
        self.main_container = ctk.CTkScrollableFrame(
            self,
            fg_color='transparent',
            scrollbar_button_color=AppTheme.COLORS['primary'],
            scrollbar_button_hover_color=AppTheme.COLORS['primary_dark']
        )
        self.main_container.grid(row=0, column=0, sticky='nsew', padx=20, pady=20)
        self.main_container.grid_columnconfigure((0, 1), weight=1)
        
        # En-t√™te moderne
        self.create_modern_header()
        
        # Section des actions rapides
        self.create_quick_actions()
        
        # Section des projets r√©cents
        self.create_recent_projects()
        
        # Section des statistiques
        self.create_statistics_panel()
        
        # Section des outils
        self.create_tools_panel()
    
    def create_modern_header(self):
        """Cr√©e l'en-t√™te moderne."""
        
        header_frame = ThemedFrame(self.main_container, elevated=True)
        header_frame.grid(row=0, column=0, columnspan=2, sticky='ew', pady=(0, 30))
        header_frame.grid_columnconfigure(1, weight=1)
        
        # Logo et titre
        left_container = ctk.CTkFrame(header_frame, fg_color='transparent')
        left_container.grid(row=0, column=0, sticky='w', padx=30, pady=30)
        
        # Logo
        logo_frame = ctk.CTkFrame(
            left_container,
            width=80,
            height=80,
            corner_radius=20,
            fg_color=AppTheme.COLORS['primary']
        )
        logo_frame.grid(row=0, column=0, padx=(0, 20))
        logo_frame.grid_propagate(False)
        
        logo_symbol = ThemedLabel(
            logo_frame,
            text="üß≠",
            style='display',
            text_color='white'
        )
        logo_symbol.place(relx=0.5, rely=0.5, anchor='center')
        
        # Titre
        title_container = ctk.CTkFrame(left_container, fg_color='transparent')
        title_container.grid(row=0, column=1, sticky='w')
        
        main_title = ThemedLabel(
            title_container,
            text="Syst√®me de Compensation Altim√©trique",
            style='title',
            text_color=AppTheme.COLORS['text']
        )
        main_title.grid(row=0, column=0, sticky='w')
        
        subtitle = ThemedLabel(
            title_container,
            text="Dashboard Principal ‚Ä¢ Interface Moderne",
            style='subheading',
            text_color=AppTheme.COLORS['text_secondary']
        )
        subtitle.grid(row=1, column=0, sticky='w', pady=(5, 0))
        
        # Statut syst√®me √† droite
        right_container = ctk.CTkFrame(header_frame, fg_color='transparent')
        right_container.grid(row=0, column=1, sticky='e', padx=30, pady=30)
        
        datetime_now = datetime.now()
        date_label = ThemedLabel(
            right_container,
            text=datetime_now.strftime("%d/%m/%Y ‚Ä¢ %H:%M"),
            style='body',
            text_color=AppTheme.COLORS['text_secondary']
        )
        date_label.grid(row=0, column=0, sticky='e')
        
        # Statut
        status_frame = ctk.CTkFrame(right_container, fg_color='transparent')
        status_frame.grid(row=1, column=0, sticky='e', pady=(5, 0))
        
        status_indicator = ctk.CTkFrame(
            status_frame,
            width=10,
            height=10,
            corner_radius=5,
            fg_color=AppTheme.COLORS['success']
        )
        status_indicator.grid(row=0, column=0, padx=(0, 5))
        
        status_label = ThemedLabel(
            status_frame,
            text="Syst√®me Op√©rationnel",
            style='small',
            text_color=AppTheme.COLORS['success']
        )
        status_label.grid(row=0, column=1)
    
    def create_quick_actions(self):
        """Cr√©e les actions rapides."""
        
        section_title = ThemedLabel(
            self.main_container,
            text="üöÄ Actions Rapides",
            style='heading',
            text_color=AppTheme.COLORS['text']
        )
        section_title.grid(row=1, column=0, columnspan=2, sticky='w', pady=(0, 15))
        
        actions_frame = ctk.CTkFrame(self.main_container, fg_color='transparent')
        actions_frame.grid(row=2, column=0, columnspan=2, sticky='ew', pady=(0, 30))
        actions_frame.grid_columnconfigure((0, 1, 2, 3), weight=1)
        
        # Ligne 1 - Actions Phase 1
        new_project_card = self.create_action_card(
            actions_frame,
            title="Nouveau Projet",
            description="Assistant de compensation pas-√†-pas",
            icon="üìÅ",
            color=AppTheme.COLORS['primary'],
            command=self.start_new_project,
            row=0, col=0
        )
        
        import_card = self.create_action_card(
            actions_frame,
            title="Import Rapide",
            description="Charger un fichier de donn√©es",
            icon="‚ö°",
            color=AppTheme.COLORS['accent'],
            command=self.quick_import,
            row=0, col=1
        )
        
        open_card = self.create_action_card(
            actions_frame,
            title="Ouvrir Projet",
            description="Continuer un projet existant",
            icon="üîÑ",
            color=AppTheme.COLORS['secondary'],
            command=self.open_existing_project,
            row=0, col=2
        )
        
        settings_card = self.create_action_card(
            actions_frame,
            title="Configuration",
            description="Param√®tres du syst√®me",
            icon="‚öôÔ∏è",
            color=AppTheme.COLORS['primary'],
            command=self.open_settings,
            row=0, col=3
        )
        
        # Ligne 2 - Actions Phase 2 (simplifi√©es)
        viz_card = self.create_action_card(
            actions_frame,
            title="Visualisations",
            description="Voir les graphiques (version simple)",
            icon="üìä",
            color=AppTheme.COLORS['accent'],
            command=self.show_visualizations_info,
            row=1, col=0
        )
        
        compare_card = self.create_action_card(
            actions_frame,
            title="Comparaison",
            description="Analyser plusieurs projets",
            icon="‚öñÔ∏è",
            color=AppTheme.COLORS['secondary'],
            command=self.show_comparison_info,
            row=1, col=1
        )
        
        manage_card = self.create_action_card(
            actions_frame,
            title="Gestion Projets",
            description="CRUD complet des projets",
            icon="üóÇÔ∏è",
            color=AppTheme.COLORS['success'],
            command=self.show_management_info,
            row=1, col=2
        )
        
        help_card = self.create_action_card(
            actions_frame,
            title="Aide & Support",
            description="Documentation et ressources",
            icon="üí¨",
            color=AppTheme.COLORS['text_muted'],
            command=self.show_help,
            row=1, col=3
        )
    
    def create_action_card(self, parent, title, description, icon, color, command, row, col):
        """Cr√©e une carte d'action."""
        
        card = ThemedFrame(parent, elevated=True)
        card.grid(row=row, column=col, padx=5, pady=5, sticky='ew')
        card.configure(cursor='hand2')
        
        content_frame = ctk.CTkFrame(card, fg_color='transparent')
        content_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Ic√¥ne
        icon_frame = ctk.CTkFrame(
            content_frame,
            width=50,
            height=50,
            corner_radius=25,
            fg_color=color
        )
        icon_frame.pack(pady=(0, 10))
        icon_frame.pack_propagate(False)
        
        icon_label = ThemedLabel(
            icon_frame,
            text=icon,
            style='subheading',
            text_color='white'
        )
        icon_label.place(relx=0.5, rely=0.5, anchor='center')
        
        # Titre
        title_label = ThemedLabel(
            content_frame,
            text=title,
            style='subheading',
            text_color=AppTheme.COLORS['text']
        )
        title_label.pack(pady=(0, 5))
        
        # Description
        desc_label = ThemedLabel(
            content_frame,
            text=description,
            style='small',
            text_color=AppTheme.COLORS['text_secondary']
        )
        desc_label.pack(pady=(0, 15))
        
        # Bouton
        action_button = ThemedButton(
            content_frame,
            text="Ouvrir",
            command=command,
            variant='primary',
            width=100,
            height=30
        )
        action_button.pack()
        
        # Effet hover
        def on_enter(event):
            card.configure(fg_color=AppTheme.COLORS['background'])
        
        def on_leave(event):
            card.configure(fg_color=AppTheme.COLORS['surface_elevated'])
        
        card.bind('<Enter>', on_enter)
        card.bind('<Leave>', on_leave)
        
        return card
    
    def create_recent_projects(self):
        """Cr√©e la section des projets r√©cents."""
        
        projects_count = len(self.projects_data)
        section_title = ThemedLabel(
            self.main_container,
            text=f"üìÇ Projets R√©cents ({projects_count})",
            style='heading',
            text_color=AppTheme.COLORS['text']
        )
        section_title.grid(row=3, column=0, sticky='w', pady=(0, 15))
        
        projects_frame = ctk.CTkFrame(self.main_container, fg_color='transparent')
        projects_frame.grid(row=4, column=0, columnspan=2, sticky='ew', pady=(0, 30))
        
        if self.projects_data:
            recent_projects = self.projects_data[:3]
            projects_frame.grid_columnconfigure((0, 1, 2), weight=1)
            
            for i, project_data in enumerate(recent_projects):
                project_card = ProjectCard(
                    projects_frame,
                    project_data=project_data,
                    callback=self.open_project
                )
                project_card.grid(row=0, column=i, padx=5, sticky='ew')
        else:
            empty_label = ThemedLabel(
                projects_frame,
                text="Aucun projet r√©cent - Cr√©ez votre premier projet !",
                style='body',
                text_color=AppTheme.COLORS['text_secondary']
            )
            empty_label.pack(pady=40)
    
    def create_statistics_panel(self):
        """Cr√©e le panneau de statistiques."""
        
        section_title = ThemedLabel(
            self.main_container,
            text="üìä Aper√ßu Syst√®me",
            style='heading',
            text_color=AppTheme.COLORS['text']
        )
        section_title.grid(row=5, column=0, columnspan=2, sticky='w', pady=(0, 15))
        
        metrics_frame = ctk.CTkFrame(self.main_container, fg_color='transparent')
        metrics_frame.grid(row=6, column=0, columnspan=2, sticky='ew', pady=(0, 30))
        metrics_frame.grid_columnconfigure((0, 1, 2, 3), weight=1)
        
        # Calculer les statistiques
        stats = self.calculate_system_statistics()
        
        # M√©triques
        projects_metric = StatusCard(
            metrics_frame,
            title="Projets Totaux",
            value=str(stats['total_projects']),
            icon="üìÅ",
            color=AppTheme.COLORS['primary']
        )
        projects_metric.grid(row=0, column=0, padx=5, sticky='ew')
        
        precision_metric = StatusCard(
            metrics_frame,
            title="Pr√©cision Moyenne",
            value=f"{stats['avg_precision']:.1f}mm",
            icon="üéØ",
            color=AppTheme.COLORS['success']
        )
        precision_metric.grid(row=0, column=1, padx=5, sticky='ew')
        
        points_metric = StatusCard(
            metrics_frame,
            title="Points Trait√©s",
            value=str(stats['total_points']),
            icon="üìç",
            color=AppTheme.COLORS['accent']
        )
        points_metric.grid(row=0, column=2, padx=5, sticky='ew')
        
        status_metric = StatusCard(
            metrics_frame,
            title="Statut Global",
            value="Op√©rationnel",
            icon="‚úÖ",
            color=AppTheme.COLORS['success']
        )
        status_metric.grid(row=0, column=3, padx=5, sticky='ew')
    
    def create_tools_panel(self):
        """Cr√©e le panneau des outils."""
        
        section_title = ThemedLabel(
            self.main_container,
            text="üõ†Ô∏è Outils Disponibles",
            style='heading',
            text_color=AppTheme.COLORS['text']
        )
        section_title.grid(row=7, column=0, columnspan=2, sticky='w', pady=(0, 15))
        
        tools_frame = ctk.CTkFrame(self.main_container, fg_color='transparent')
        tools_frame.grid(row=8, column=0, columnspan=2, sticky='ew', pady=(0, 30))
        tools_frame.grid_columnconfigure((0, 1), weight=1)
        
        # Outils Phase 1
        phase1_tools = ThemedFrame(tools_frame, elevated=True)
        phase1_tools.grid(row=0, column=0, padx=(0, 10), sticky='nsew')
        
        phase1_title = ThemedLabel(
            phase1_tools,
            text="üìã Phase 1 - Assistant",
            style='subheading',
            text_color=AppTheme.COLORS['text']
        )
        phase1_title.pack(padx=20, pady=(20, 10), anchor='w')
        
        phase1_features = [
            "‚úÖ Import de fichiers Excel/CSV",
            "‚úÖ Configuration param√®tres de base",
            "‚úÖ Calculs pr√©liminaires", 
            "‚úÖ Compensation LSQ automatique",
            "‚úÖ Export des r√©sultats"
        ]
        
        for feature in phase1_features:
            feature_label = ThemedLabel(
                phase1_tools,
                text=feature,
                style='small',
                text_color=AppTheme.COLORS['text']
            )
            feature_label.pack(padx=20, pady=2, anchor='w')
        
        # Outils Phase 2
        phase2_tools = ThemedFrame(tools_frame, elevated=True)
        phase2_tools.grid(row=0, column=1, padx=(10, 0), sticky='nsew')
        
        phase2_title = ThemedLabel(
            phase2_tools,
            text="üöÄ Phase 2 - Avanc√©",
            style='subheading',
            text_color=AppTheme.COLORS['text']
        )
        phase2_title.pack(padx=20, pady=(20, 10), anchor='w')
        
        phase2_features = [
            "üîß Visualisations scientifiques",
            "üîß Mode comparaison multi-projets",
            "üîß Configuration g√©od√©sique experte",
            "üîß Gestion √©tendue des projets",
            "üîß Analyses statistiques avanc√©es"
        ]
        
        for feature in phase2_features:
            feature_label = ThemedLabel(
                phase2_tools,
                text=feature,
                style='small',
                text_color=AppTheme.COLORS['text_secondary']
            )
            feature_label.pack(padx=20, pady=2, anchor='w')
        
        # Note sur Phase 2
        note_label = ThemedLabel(
            phase2_tools,
            text="‚ö†Ô∏è Fonctionnalit√©s avanc√©es en cours d'optimisation",
            style='caption',
            text_color=AppTheme.COLORS['warning']
        )
        note_label.pack(padx=20, pady=(10, 20), anchor='w')
    
    # M√©thodes de gestion des donn√©es (identiques)
    def load_projects_data(self):
        """Charge les donn√©es des projets."""
        try:
            projects_file = Path("data/projects.json")
            if projects_file.exists():
                with open(projects_file, 'r', encoding='utf-8') as f:
                    self.projects_data = json.load(f)
            else:
                self.projects_data = []
        except Exception as e:
            print(f"Erreur chargement projets: {e}")
            self.projects_data = []
    
    def calculate_system_statistics(self):
        """Calcule les statistiques syst√®me."""
        total_projects = len(self.projects_data)
        
        completed_projects = [p for p in self.projects_data if p.get('precision_achieved')]
        avg_precision = sum(p['precision_achieved'] for p in completed_projects) / len(completed_projects) if completed_projects else 2.0
        
        total_points = sum(p.get('points_count', 0) for p in self.projects_data)
        
        return {
            'total_projects': total_projects,
            'avg_precision': avg_precision,
            'total_points': total_points
        }
    
    # M√©thodes de callback (simplifi√©es)
    def start_new_project(self):
        """D√©marre un nouveau projet."""
        messagebox.showinfo("Nouveau Projet", 
            "üöÄ Assistant de compensation altim√©trique\n\n"
            "Fonctionnalit√©s :\n"
            "‚Ä¢ Import de fichiers Excel/CSV\n"
            "‚Ä¢ Configuration automatique\n" 
            "‚Ä¢ Calculs LSQ\n"
            "‚Ä¢ Export des r√©sultats\n\n"
            "Lancez l'interface compl√®te avec :\n"
            "python3 gui/main_window.py")
    
    def quick_import(self):
        """Import rapide."""
        messagebox.showinfo("Import Rapide",
            "‚ö° Import direct de fichiers de donn√©es\n\n"
            "Formats support√©s :\n"
            "‚Ä¢ Excel (.xlsx, .xls)\n"
            "‚Ä¢ CSV (.csv)\n"
            "‚Ä¢ Formats g√©od√©siques\n\n"
            "Disponible dans l'interface compl√®te")
    
    def open_existing_project(self):
        """Ouvre un projet existant."""
        messagebox.showinfo("Ouvrir Projet",
            "üîÑ Gestionnaire de projets\n\n"
            f"Projets disponibles : {len(self.projects_data)}\n"
            "‚Ä¢ Projets r√©cents affich√©s\n"
            "‚Ä¢ Recherche et filtrage\n"
            "‚Ä¢ Reprise de calculs\n\n"
            "Interface compl√®te recommand√©e")
    
    def open_settings(self):
        """Ouvre les param√®tres."""
        messagebox.showinfo("Configuration",
            "‚öôÔ∏è Param√®tres du syst√®me\n\n"
            "Configuration disponible :\n"
            "‚Ä¢ Pr√©cision cible (2mm)\n"
            "‚Ä¢ M√©thodes LSQ\n"
            "‚Ä¢ Corrections atmosph√©riques\n"
            "‚Ä¢ Syst√®mes g√©od√©siques\n\n"
            "5 presets pr√™ts √† utiliser")
    
    def show_visualizations_info(self):
        """Info visualisations."""
        messagebox.showinfo("Visualisations Avanc√©es",
            "üìä Graphiques scientifiques\n\n"
            "Fonctionnalit√©s pr√™tes :\n"
            "‚Ä¢ Profils altimetriques\n"
            "‚Ä¢ Analyses de fermeture\n"
            "‚Ä¢ Diagnostics LSQ\n"
            "‚Ä¢ Export haute r√©solution\n\n"
            "‚ö†Ô∏è En cours d'optimisation technique\n"
            "Logique m√©tier valid√©e √† 100%")
    
    def show_comparison_info(self):
        """Info comparaison."""
        messagebox.showinfo("Mode Comparaison",
            "‚öñÔ∏è Analyse multi-projets\n\n"
            "Fonctionnalit√©s pr√™tes :\n"
            "‚Ä¢ S√©lection intelligente (max 4)\n"
            "‚Ä¢ Comparaisons visuelles\n" 
            "‚Ä¢ M√©triques temps r√©el\n"
            "‚Ä¢ Export analyses\n\n"
            "‚ö†Ô∏è Interface en finalisation\n"
            "Algorithmes valid√©s")
    
    def show_management_info(self):
        """Info gestion."""
        messagebox.showinfo("Gestion √âtendue",
            "üóÇÔ∏è CRUD complet des projets\n\n"
            "Fonctionnalit√©s pr√™tes :\n"
            "‚Ä¢ Recherche multi-crit√®res\n"
            "‚Ä¢ Interface CRUD compl√®te\n"
            "‚Ä¢ M√©triques qualit√© auto\n"
            "‚Ä¢ Actions batch\n\n"
            "‚ö†Ô∏è Optimisation interface en cours\n"
            "Fonctionnalit√©s core valid√©es")
    
    def show_help(self):
        """Affiche l'aide."""
        messagebox.showinfo("Aide & Support",
            "üí¨ Documentation et ressources\n\n"
            "Tests disponibles :\n"
            "‚Ä¢ demo_core_features.py\n"
            "‚Ä¢ test_phase2_simple.py\n"
            "‚Ä¢ PHASE2_COMPLETE_SUMMARY.md\n\n"
            "üìä Statut Phase 2 :\n"
            "‚Ä¢ Logique m√©tier : 100% ‚úÖ\n"
            "‚Ä¢ Structure : 100% ‚úÖ\n"
            "‚Ä¢ Interface : En optimisation ‚ö†Ô∏è")
    
    def open_project(self, project_data):
        """Ouvre un projet sp√©cifique."""
        project_name = project_data.get('name', 'Projet inconnu')
        precision = project_data.get('precision_achieved')
        points = project_data.get('points_count', 0)
        
        info_text = f"üìÇ {project_name}\n\n"
        info_text += f"üìç Points : {points}\n"
        if precision:
            info_text += f"üéØ Pr√©cision : {precision:.1f}mm\n"
        info_text += f"üìÖ Statut : {project_data.get('status', 'Inconnu')}\n\n"
        info_text += "Ouvrir dans l'interface compl√®te pour\n"
        info_text += "acc√©der √† toutes les fonctionnalit√©s."
        
        messagebox.showinfo("D√©tails du Projet", info_text)