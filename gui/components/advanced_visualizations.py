"""
Visualisations interactives avanc√©es pour le Syst√®me de Compensation Altim√©trique.
Graphiques modernes avec Plotly, Matplotlib et int√©gration CustomTkinter.
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.figure import Figure
import matplotlib.patches as patches
from typing import Dict, List, Optional, Any, Tuple
import json
from pathlib import Path
from datetime import datetime

try:
    import plotly.graph_objects as go
    import plotly.express as px
    from plotly.subplots import make_subplots
    import plotly.offline as pyo
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False
    print("‚ö†Ô∏è Plotly non disponible - utilisation de Matplotlib seul")

# Configuration matplotlib pour √©viter les erreurs d'affichage
import matplotlib
matplotlib.use('Agg')  # Backend non-interactif pour √©viter les erreurs X11

from .base_components import ThemedButton, ThemedLabel, ThemedFrame, StatusCard
from ..utils.theme import AppTheme


class AdvancedVisualizationPanel(ThemedFrame):
    """Panel de visualisation avanc√©e avec graphiques interactifs."""
    
    def __init__(self, parent, data=None, **kwargs):
        super().__init__(parent, elevated=True, **kwargs)
        
        self.data = data or {}
        self.current_chart = None
        self.fig = None
        self.canvas = None
        
        # Configuration matplotlib avec th√®me g√©od√©sique
        self.setup_matplotlib_theme()
        
        # Cr√©er l'interface
        self.create_visualization_interface()
    
    def setup_matplotlib_theme(self):
        """Configure le th√®me matplotlib selon la palette g√©od√©sique."""
        
        # Style moderne avec couleurs g√©od√©siques
        plt.style.use('seaborn-v0_8-whitegrid' if 'seaborn-v0_8-whitegrid' in plt.style.available else 'default')
        
        # Configuration des couleurs globales
        plt.rcParams.update({
            'figure.facecolor': AppTheme.COLORS['background'],
            'axes.facecolor': AppTheme.COLORS['surface'],
            'axes.edgecolor': AppTheme.COLORS['border'],
            'axes.linewidth': 1,
            'axes.grid': True,
            'grid.color': AppTheme.COLORS['border_light'],
            'grid.alpha': 0.3,
            'text.color': AppTheme.COLORS['text'],
            'axes.labelcolor': AppTheme.COLORS['text'],
            'axes.titlecolor': AppTheme.COLORS['text'],
            'xtick.color': AppTheme.COLORS['text_secondary'],
            'ytick.color': AppTheme.COLORS['text_secondary'],
            'font.family': 'sans-serif',
            'font.sans-serif': ['Segoe UI', 'Arial', 'DejaVu Sans'],
            'font.size': 10,
            'axes.titlesize': 14,
            'axes.labelsize': 12,
            'xtick.labelsize': 10,
            'ytick.labelsize': 10,
            'legend.fontsize': 10,
            'figure.titlesize': 16
        })
    
    def create_visualization_interface(self):
        """Cr√©e l'interface de visualisation."""
        
        # En-t√™te avec contr√¥les
        self.create_header_controls()
        
        # Zone principale de visualisation
        self.create_main_visualization_area()
        
        # Panneau d'analyse
        self.create_analysis_panel()
    
    def create_header_controls(self):
        """Cr√©e les contr√¥les d'en-t√™te."""
        
        header_frame = ctk.CTkFrame(self, fg_color='transparent')
        header_frame.pack(fill='x', padx=20, pady=(20, 10))
        
        # Titre avec ic√¥ne
        title_frame = ctk.CTkFrame(header_frame, fg_color='transparent')
        title_frame.pack(side='left')
        
        icon_label = ThemedLabel(
            title_frame,
            text="üìä",
            style='heading',
            text_color=AppTheme.COLORS['primary']
        )
        icon_label.pack(side='left', padx=(0, 10))
        
        title_label = ThemedLabel(
            title_frame,
            text="Visualisations Avanc√©es",
            style='heading',
            text_color=AppTheme.COLORS['text']
        )
        title_label.pack(side='left')
        
        # Contr√¥les de navigation
        controls_frame = ctk.CTkFrame(header_frame, fg_color='transparent')
        controls_frame.pack(side='right')
        
        # S√©lecteur de type de graphique
        self.chart_type_var = ctk.StringVar(value="Profil Altim√©trique")
        self.chart_selector = ctk.CTkOptionMenu(
            controls_frame,
            variable=self.chart_type_var,
            values=[
                "Profil Altim√©trique",
                "Analyse de Fermeture", 
                "Diagnostics Compensation",
                "√âvolution Pr√©cision",
                "Carte de Chaleur R√©sidus",
                "Analyse Spectrale",
                "Comparaison M√©thodes",
                "Dashboard Qualit√©"
            ],
            command=self.on_chart_type_changed,
            font=AppTheme.FONTS['body'],
            fg_color=AppTheme.COLORS['surface'],
            button_color=AppTheme.COLORS['primary'],
            dropdown_fg_color=AppTheme.COLORS['surface']
        )
        self.chart_selector.pack(side='left', padx=(0, 10))
        
        # Bouton actualiser
        refresh_button = ThemedButton(
            controls_frame,
            text="üîÑ Actualiser",
            command=self.refresh_visualization,
            variant='outline',
            size='small'
        )
        refresh_button.pack(side='left', padx=(0, 10))
        
        # Bouton exporter
        export_button = ThemedButton(
            controls_frame,
            text="üíæ Exporter",
            command=self.export_visualization,
            variant='primary',
            size='small'
        )
        export_button.pack(side='left')
    
    def create_main_visualization_area(self):
        """Cr√©e la zone principale de visualisation."""
        
        # Container principal pour graphiques
        viz_container = ctk.CTkFrame(self, fg_color=AppTheme.COLORS['surface'])
        viz_container.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Zone de graphique matplotlib
        self.matplotlib_frame = ctk.CTkFrame(viz_container, fg_color='transparent')
        self.matplotlib_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Cr√©er le graphique initial
        self.create_altitude_profile()
    
    def create_analysis_panel(self):
        """Cr√©e le panneau d'analyse avec m√©triques."""
        
        analysis_frame = ctk.CTkFrame(self, fg_color='transparent')
        analysis_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        # Titre du panneau
        panel_title = ThemedLabel(
            analysis_frame,
            text="üìà Analyse en Temps R√©el",
            style='subheading',
            text_color=AppTheme.COLORS['secondary']
        )
        panel_title.pack(anchor='w', pady=(0, 10))
        
        # M√©triques en ligne
        metrics_frame = ctk.CTkFrame(analysis_frame, fg_color='transparent')
        metrics_frame.pack(fill='x')
        metrics_frame.grid_columnconfigure((0, 1, 2, 3), weight=1)
        
        # Cr√©er les cartes de m√©triques
        self.create_analysis_metrics(metrics_frame)
    
    def create_analysis_metrics(self, parent):
        """Cr√©e les m√©triques d'analyse."""
        
        # Donn√©es d'exemple (en production, viendraient des calculs)
        metrics_data = self.calculate_visualization_metrics()
        
        # M√©trique 1: Points analys√©s
        points_metric = StatusCard(
            parent,
            title="Points Analys√©s",
            value=str(metrics_data['points_count']),
            icon="üìç",
            color=AppTheme.COLORS['primary']
        )
        points_metric.grid(row=0, column=0, padx=(0, 10), sticky='ew')
        
        # M√©trique 2: Erreur RMS
        rms_metric = StatusCard(
            parent,
            title="Erreur RMS",
            value=f"{metrics_data['rms_error']:.2f}mm",
            icon="üìè",
            color=AppTheme.COLORS['warning'] if metrics_data['rms_error'] > 2.0 else AppTheme.COLORS['success']
        )
        rms_metric.grid(row=0, column=1, padx=5, sticky='ew')
        
        # M√©trique 3: Facteur qualit√©
        quality_metric = StatusCard(
            parent,
            title="Facteur Qualit√©",
            value=f"{metrics_data['quality_factor']:.1f}",
            icon="üéØ",
            color=self.get_quality_color(metrics_data['quality_factor'])
        )
        quality_metric.grid(row=0, column=2, padx=5, sticky='ew')
        
        # M√©trique 4: Statut global
        status_metric = StatusCard(
            parent,
            title="Statut Global",
            value=metrics_data['global_status'],
            icon="‚úÖ" if metrics_data['global_status'] == "OK" else "‚ö†Ô∏è",
            color=AppTheme.COLORS['success'] if metrics_data['global_status'] == "OK" else AppTheme.COLORS['warning']
        )
        status_metric.grid(row=0, column=3, padx=(10, 0), sticky='ew')
    
    def calculate_visualization_metrics(self) -> Dict[str, Any]:
        """Calcule les m√©triques de visualisation."""
        
        # En mode d√©mo, g√©n√©rer des donn√©es
        np.random.seed(42)
        
        points_count = 45
        errors = np.random.normal(0, 1.2, points_count)  # Erreurs en mm
        rms_error = np.sqrt(np.mean(errors**2))
        
        # Facteur qualit√© bas√© sur RMS et distribution
        quality_factor = max(0.1, 10 - rms_error)
        global_status = "OK" if rms_error < 2.0 and quality_factor > 7.0 else "ATTENTION"
        
        return {
            'points_count': points_count,
            'rms_error': rms_error,
            'quality_factor': quality_factor,
            'global_status': global_status,
            'errors': errors
        }
    
    def get_quality_color(self, quality: float) -> str:
        """D√©termine la couleur selon la qualit√©."""
        if quality >= 8.0:
            return AppTheme.COLORS['success']
        elif quality >= 6.0:
            return AppTheme.COLORS['warning']
        else:
            return AppTheme.COLORS['error']
    
    def create_altitude_profile(self):
        """Cr√©e le profil altim√©trique moderne."""
        
        # Nettoyer le canvas pr√©c√©dent
        self.clear_canvas()
        
        # Cr√©er la figure avec style moderne
        self.fig = Figure(figsize=(12, 6), dpi=100, facecolor=AppTheme.COLORS['background'])
        ax = self.fig.add_subplot(111)
        
        # Donn√©es d'exemple (en production: donn√©es r√©elles du projet)
        distances = np.array([0, 250, 550, 825, 1250])
        altitudes_brutes = np.array([125.456, 125.701, 125.578, 125.665, 125.821])
        altitudes_compensees = altitudes_brutes + np.random.normal(0, 0.001, len(altitudes_brutes))
        points = ['RN001', 'P001', 'P002', 'P003', 'RN002']
        
        # Zone de tol√©rance ¬±2mm
        tolerance_upper = altitudes_compensees + 0.002
        tolerance_lower = altitudes_compensees - 0.002
        ax.fill_between(distances, tolerance_lower, tolerance_upper, 
                       alpha=0.2, color=AppTheme.COLORS['success'], 
                       label='Zone de pr√©cision ¬±2mm')
        
        # Profil avant compensation
        ax.plot(distances, altitudes_brutes, 'o--', 
               color=AppTheme.COLORS['text_secondary'], 
               linewidth=2, markersize=8, alpha=0.7,
               label='Avant compensation')
        
        # Profil apr√®s compensation
        ax.plot(distances, altitudes_compensees, 'o-', 
               color=AppTheme.COLORS['primary'], 
               linewidth=3, markersize=10,
               label='Apr√®s compensation LSQ')
        
        # Points de contr√¥le sp√©ciaux
        rn_indices = [0, 4]  # Rep√®res de nivellement
        ax.scatter(distances[rn_indices], altitudes_compensees[rn_indices], 
                  s=200, marker='s', color=AppTheme.COLORS['accent'],
                  edgecolor='white', linewidth=2, zorder=5,
                  label='Rep√®res de nivellement')
        
        # Annotations des points
        for i, (point, x, y) in enumerate(zip(points, distances, altitudes_compensees)):
            offset = 15 if i % 2 == 0 else -25
            ax.annotate(f'{point}\n{y:.3f}m', 
                       (x, y), xytext=(0, offset), 
                       textcoords='offset points', ha='center',
                       bbox=dict(boxstyle='round,pad=0.3', 
                               facecolor='white', alpha=0.8,
                               edgecolor=AppTheme.COLORS['border']),
                       fontsize=9, color=AppTheme.COLORS['text'])
        
        # Configuration des axes
        ax.set_xlabel('Distance cumulative (m)', fontsize=12, color=AppTheme.COLORS['text'])
        ax.set_ylabel('Altitude (m)', fontsize=12, color=AppTheme.COLORS['text'])
        ax.set_title('üìà Profil Altim√©trique - Compensation par Moindres Carr√©s\nPr√©cision: ¬±2mm ‚Ä¢ M√©thode: LSQ ‚Ä¢ Qualit√©: Excellente', 
                    fontsize=14, color=AppTheme.COLORS['text'], pad=20)
        
        # Grille moderne
        ax.grid(True, alpha=0.3, color=AppTheme.COLORS['border_light'])
        ax.set_axisbelow(True)
        
        # L√©gende avec style
        legend = ax.legend(loc='upper right', fancybox=True, shadow=True, 
                          frameon=True, facecolor='white', edgecolor=AppTheme.COLORS['border'])
        legend.get_frame().set_alpha(0.9)
        
        # Couleurs des axes
        ax.spines['bottom'].set_color(AppTheme.COLORS['border'])
        ax.spines['top'].set_color(AppTheme.COLORS['border'])
        ax.spines['left'].set_color(AppTheme.COLORS['border'])
        ax.spines['right'].set_color(AppTheme.COLORS['border'])
        ax.tick_params(colors=AppTheme.COLORS['text_secondary'])
        
        # Int√©grer dans l'interface
        self.integrate_matplotlib_canvas()
    
    def create_closure_analysis(self):
        """Cr√©e l'analyse de fermeture moderne."""
        
        self.clear_canvas()
        
        # Figure avec sous-graphiques
        self.fig = Figure(figsize=(12, 8), dpi=100, facecolor=AppTheme.COLORS['background'])
        
        # Disposition 2x2
        gs = self.fig.add_gridspec(2, 2, hspace=0.3, wspace=0.3)
        
        # 1. Erreur de fermeture
        ax1 = self.fig.add_subplot(gs[0, 0])
        closure_error = 2.5  # mm
        tolerance = 4.8
        
        bars = ax1.bar(['Erreur mesur√©e', 'Tol√©rance'], 
                      [closure_error, tolerance],
                      color=[AppTheme.COLORS['warning'], AppTheme.COLORS['success']], 
                      alpha=0.8)
        ax1.set_ylabel('Erreur (mm)')
        ax1.set_title('üéØ Erreur de Fermeture', fontweight='bold')
        ax1.grid(True, alpha=0.3)
        
        # Annotations
        for bar, value in zip(bars, [closure_error, tolerance]):
            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                    f'{value:.1f} mm', ha='center', fontweight='bold')
        
        # 2. Distribution des r√©sidus
        ax2 = self.fig.add_subplot(gs[0, 1])
        residuals = np.random.normal(0, 0.8, 100)
        ax2.hist(residuals, bins=20, color=AppTheme.COLORS['primary'], 
                alpha=0.7, edgecolor='black')
        ax2.axvline(x=0, color=AppTheme.COLORS['error'], 
                   linestyle='--', linewidth=2, label='R√©f√©rence')
        ax2.set_xlabel('R√©sidus (mm)')
        ax2.set_ylabel('Fr√©quence')
        ax2.set_title('üìä Distribution des R√©sidus', fontweight='bold')
        ax2.grid(True, alpha=0.3)
        
        # 3. Statistiques LSQ
        ax3 = self.fig.add_subplot(gs[1, 0])
        stats_labels = ['œÉ‚ÇÄ (mm)', 'DDL', 'Test œá¬≤']
        stats_values = [1.12, 4, 'OK']
        colors_stats = [AppTheme.COLORS['success'], AppTheme.COLORS['primary'], AppTheme.COLORS['success']]
        
        bars = ax3.bar(stats_labels, [1.12, 4, 1], color=colors_stats, alpha=0.8)
        ax3.set_ylabel('Valeurs')
        ax3.set_title('‚öôÔ∏è Statistiques LSQ', fontweight='bold')
        ax3.grid(True, alpha=0.3)
        
        # 4. Qualit√© par point
        ax4 = self.fig.add_subplot(gs[1, 1])
        quality_points = ['RN001', 'P001', 'P002', 'P003', 'RN002']
        quality_values = [0.8, 1.2, 0.9, 1.1, 0.6]
        
        bars = ax4.bar(quality_points, quality_values, 
                      color=AppTheme.COLORS['accent'], alpha=0.8)
        ax4.axhline(y=1.0, color=AppTheme.COLORS['error'], 
                   linestyle='--', linewidth=2, label='Seuil qualit√©')
        ax4.set_ylabel('Indicateur qualit√© (mm)')
        ax4.set_title('üèÜ Qualit√© par Point', fontweight='bold')
        ax4.grid(True, alpha=0.3)
        ax4.tick_params(axis='x', rotation=45)
        
        # Titre g√©n√©ral
        self.fig.suptitle('üßÆ Analyse de Fermeture Compl√®te\nSyst√®me de Compensation Altim√©trique', 
                         fontsize=16, color=AppTheme.COLORS['text'], y=0.95)
        
        self.integrate_matplotlib_canvas()
    
    def create_compensation_diagnostics(self):
        """Cr√©e les diagnostics de compensation."""
        
        self.clear_canvas()
        
        self.fig = Figure(figsize=(12, 10), dpi=100, facecolor=AppTheme.COLORS['background'])
        
        # Disposition 3x2
        gs = self.fig.add_gridspec(3, 2, hspace=0.4, wspace=0.3)
        
        # 1. √âvolution des corrections
        ax1 = self.fig.add_subplot(gs[0, :])  # Span sur 2 colonnes
        points = np.arange(1, 6)
        corrections = np.array([-0.0012, 0.0008, -0.0015, 0.0021, -0.0005]) * 1000  # en mm
        
        bars = ax1.bar(points, corrections, color=AppTheme.COLORS['primary'], alpha=0.7)
        ax1.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        ax1.set_xlabel('Points de mesure')
        ax1.set_ylabel('Corrections (mm)')
        ax1.set_title('üîß Corrections Appliqu√©es par Point', fontweight='bold', pad=20)
        ax1.grid(True, alpha=0.3)
        
        # Coloration selon le seuil
        for bar, correction in zip(bars, corrections):
            if abs(correction) > 1.5:  # Seuil d'alerte
                bar.set_color(AppTheme.COLORS['warning'])
        
        # 2. Matrice de poids
        ax2 = self.fig.add_subplot(gs[1, 0])
        weights_matrix = np.random.exponential(2, (5, 5))
        np.fill_diagonal(weights_matrix, 5)  # Poids diagonaux plus √©lev√©s
        
        im = ax2.imshow(weights_matrix, cmap='Blues', aspect='auto')
        ax2.set_title('‚öñÔ∏è Matrice des Poids', fontweight='bold')
        ax2.set_xlabel('Points j')
        ax2.set_ylabel('Points i')
        
        # Ajouter la barre de couleur
        cbar = self.fig.colorbar(im, ax=ax2)
        cbar.set_label('Poids relatifs')
        
        # 3. Convergence LSQ
        ax3 = self.fig.add_subplot(gs[1, 1])
        iterations = np.arange(1, 11)
        precision = 3.5 * np.exp(-iterations/3) + 0.8
        
        ax3.plot(iterations, precision, 'o-', color=AppTheme.COLORS['secondary'], 
                linewidth=2, markersize=6)
        ax3.axhline(y=2.0, color=AppTheme.COLORS['success'], 
                   linestyle='--', linewidth=2, label='Objectif 2mm')
        ax3.set_xlabel('It√©ration')
        ax3.set_ylabel('Pr√©cision (mm)')
        ax3.set_title('üìà Convergence LSQ', fontweight='bold')
        ax3.grid(True, alpha=0.3)
        ax3.legend()
        
        # 4. Analyse des r√©sidus normalis√©s
        ax4 = self.fig.add_subplot(gs[2, 0])
        residuals_norm = np.random.normal(0, 1, 100)
        
        # Q-Q plot simplifi√©
        sorted_residuals = np.sort(residuals_norm)
        theoretical_quantiles = np.linspace(-2.5, 2.5, len(sorted_residuals))
        
        ax4.scatter(theoretical_quantiles, sorted_residuals, 
                   color=AppTheme.COLORS['primary'], alpha=0.6)
        ax4.plot([-2.5, 2.5], [-2.5, 2.5], 'r--', linewidth=2, label='Distribution normale')
        ax4.set_xlabel('Quantiles th√©oriques')
        ax4.set_ylabel('R√©sidus observ√©s')
        ax4.set_title('üìâ Q-Q Plot R√©sidus', fontweight='bold')
        ax4.grid(True, alpha=0.3)
        ax4.legend()
        
        # 5. Facteurs de variance
        ax5 = self.fig.add_subplot(gs[2, 1])
        variance_factors = np.array([1.2, 0.8, 1.5, 0.9, 1.1])
        point_names = ['RN001', 'P001', 'P002', 'P003', 'RN002']
        
        bars = ax5.bar(point_names, variance_factors, 
                      color=AppTheme.COLORS['accent'], alpha=0.8)
        ax5.axhline(y=1.0, color=AppTheme.COLORS['text'], 
                   linestyle='--', linewidth=2, alpha=0.5)
        ax5.set_ylabel('Facteur de variance')
        ax5.set_title('üé≤ Facteurs de Variance', fontweight='bold')
        ax5.grid(True, alpha=0.3)
        ax5.tick_params(axis='x', rotation=45)
        
        # Titre g√©n√©ral
        self.fig.suptitle('üîç Diagnostics Avanc√©s de Compensation\nAnalyse Statistique Compl√®te', 
                         fontsize=16, color=AppTheme.COLORS['text'], y=0.98)
        
        self.integrate_matplotlib_canvas()
    
    def create_heatmap_residuals(self):
        """Cr√©e la carte de chaleur des r√©sidus."""
        
        self.clear_canvas()
        
        self.fig = Figure(figsize=(10, 8), dpi=100, facecolor=AppTheme.COLORS['background'])
        ax = self.fig.add_subplot(111)
        
        # G√©n√©rer des donn√©es de r√©sidus 2D
        x = np.linspace(0, 1000, 20)
        y = np.linspace(100, 200, 15)
        X, Y = np.meshgrid(x, y)
        
        # R√©sidus simul√©s avec pattern g√©ographique
        Z = (np.sin(X/200) * np.cos(Y/50) + 
             np.random.normal(0, 0.3, X.shape)) * 2  # En mm
        
        # Carte de chaleur
        im = ax.imshow(Z, cmap='RdYlBu_r', aspect='auto', 
                      extent=[x.min(), x.max(), y.min(), y.max()])
        
        # Contours pour plus de lisibilit√©
        contours = ax.contour(X, Y, Z, levels=10, colors='black', alpha=0.3, linewidths=0.5)
        ax.clabel(contours, inline=True, fontsize=8)
        
        # Configuration
        ax.set_xlabel('Distance Est (m)')
        ax.set_ylabel('Distance Nord (m)')
        ax.set_title('üó∫Ô∏è Carte de Chaleur des R√©sidus\nDistribution Spatiale des Erreurs', 
                    fontsize=14, pad=20)
        
        # Barre de couleur
        cbar = self.fig.colorbar(im, ax=ax)
        cbar.set_label('R√©sidus (mm)')
        
        self.integrate_matplotlib_canvas()
    
    def clear_canvas(self):
        """Nettoie le canvas matplotlib."""
        if self.canvas:
            self.canvas.get_tk_widget().destroy()
        if hasattr(self, 'toolbar') and self.toolbar:
            self.toolbar.destroy()
    
    def integrate_matplotlib_canvas(self):
        """Int√®gre le canvas matplotlib dans l'interface."""
        
        # Cr√©er le canvas
        self.canvas = FigureCanvasTkAgg(self.fig, self.matplotlib_frame)
        self.canvas.draw()
        
        # Widget tkinter du canvas
        canvas_widget = self.canvas.get_tk_widget()
        canvas_widget.pack(fill='both', expand=True)
        
        # Toolbar de navigation
        toolbar_frame = ctk.CTkFrame(self.matplotlib_frame, fg_color='transparent', height=40)
        toolbar_frame.pack(fill='x', pady=(0, 10))
        
        self.toolbar = NavigationToolbar2Tk(self.canvas, toolbar_frame)
        self.toolbar.config(bg=AppTheme.COLORS['surface'])
        self.toolbar.update()
    
    # Callbacks des contr√¥les
    def on_chart_type_changed(self, selection):
        """G√®re le changement de type de graphique."""
        
        chart_methods = {
            "Profil Altim√©trique": self.create_altitude_profile,
            "Analyse de Fermeture": self.create_closure_analysis,
            "Diagnostics Compensation": self.create_compensation_diagnostics,
            "√âvolution Pr√©cision": self.create_precision_evolution,
            "Carte de Chaleur R√©sidus": self.create_heatmap_residuals,
            "Analyse Spectrale": self.create_spectral_analysis,
            "Comparaison M√©thodes": self.create_methods_comparison,
            "Dashboard Qualit√©": self.create_quality_dashboard
        }
        
        method = chart_methods.get(selection)
        if method:
            method()
        else:
            messagebox.showinfo("Info", f"Graphique '{selection}' en cours de d√©veloppement")
    
    def create_precision_evolution(self):
        """Graphique d'√©volution de la pr√©cision."""
        messagebox.showinfo("D√©veloppement", "√âvolution de la pr√©cision - En cours d'impl√©mentation")
    
    def create_spectral_analysis(self):
        """Analyse spectrale des donn√©es."""
        messagebox.showinfo("D√©veloppement", "Analyse spectrale - En cours d'impl√©mentation")
    
    def create_methods_comparison(self):
        """Comparaison des m√©thodes."""
        messagebox.showinfo("D√©veloppement", "Comparaison m√©thodes - En cours d'impl√©mentation")
    
    def create_quality_dashboard(self):
        """Dashboard de qualit√©."""
        messagebox.showinfo("D√©veloppement", "Dashboard qualit√© - En cours d'impl√©mentation")
    
    def refresh_visualization(self):
        """Actualise la visualisation."""
        current_chart = self.chart_type_var.get()
        self.on_chart_type_changed(current_chart)
    
    def export_visualization(self):
        """Exporte la visualisation."""
        if self.fig:
            from tkinter import filedialog
            filepath = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[
                    ("PNG files", "*.png"),
                    ("PDF files", "*.pdf"), 
                    ("SVG files", "*.svg"),
                    ("All files", "*.*")
                ]
            )
            if filepath:
                self.fig.savefig(filepath, dpi=300, bbox_inches='tight',
                               facecolor=AppTheme.COLORS['background'])
                messagebox.showinfo("Export", f"Visualisation export√©e vers :\n{filepath}")


class InteractiveVisualizationWindow(ctk.CTkToplevel):
    """Fen√™tre d√©di√©e aux visualisations interactives."""
    
    def __init__(self, parent, data=None):
        super().__init__(parent)
        
        self.data = data
        
        # Configuration de la fen√™tre
        self.title("üìä Visualisations Interactives - Compensation Altim√©trique")
        self.geometry("1400x900")
        self.minsize(1200, 800)
        
        # Appliquer le th√®me
        self.configure(fg_color=AppTheme.COLORS['background'])
        
        # Centrer la fen√™tre
        self.center_window()
        
        # Cr√©er l'interface
        self.create_interface()
    
    def center_window(self):
        """Centre la fen√™tre sur l'√©cran."""
        self.update_idletasks()
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        x = (screen_width - 1400) // 2
        y = (screen_height - 900) // 2
        
        self.geometry(f"1400x900+{x}+{y}")
    
    def create_interface(self):
        """Cr√©e l'interface de la fen√™tre."""
        
        # Panel de visualisation principal
        self.viz_panel = AdvancedVisualizationPanel(
            self,
            data=self.data
        )
        self.viz_panel.pack(fill='both', expand=True, padx=20, pady=20)