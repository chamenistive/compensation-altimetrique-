#!/usr/bin/env python3
"""
Script de test CLI pour l'import de donn√©es r√©elles.
Permet de tester l'onglet Import Donn√©es sans interface graphique.
"""

import sys
import os
from pathlib import Path
from tkinter import filedialog
import tkinter as tk

# Ajouter le r√©pertoire parent au path
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

from src.data_importer import DataImporter
from src.utils import quick_import

def test_import_cli():
    """Test interactif en ligne de commande."""
    print("üßÆ Test du module d'import - Donn√©es topographiques")
    print("=" * 60)
    
    # Rechercher des fichiers Excel dans le projet
    excel_files = list(Path('.').rglob('*.xlsx')) + list(Path('.').rglob('*.xls'))
    csv_files = list(Path('.').rglob('*.csv'))
    
    if excel_files or csv_files:
        print("\nüìÅ Fichiers trouv√©s dans le projet :")
        all_files = excel_files + csv_files
        for i, file in enumerate(all_files, 1):
            print(f"  {i}. {file}")
        
        print(f"\n  {len(all_files) + 1}. S√©lectionner un autre fichier...")
        
        try:
            choice = input(f"\nChoisissez un fichier (1-{len(all_files) + 1}) : ").strip()
            choice = int(choice)
            
            if 1 <= choice <= len(all_files):
                filepath = all_files[choice - 1]
            else:
                filepath = input("Chemin vers votre fichier : ").strip()
        except (ValueError, IndexError):
            filepath = input("Chemin vers votre fichier : ").strip()
    else:
        print("\nüìÇ Aucun fichier Excel/CSV trouv√© dans le projet")
        filepath = input("Chemin vers votre fichier de donn√©es : ").strip()
    
    if not filepath or not Path(filepath).exists():
        print("‚ùå Fichier non trouv√© !")
        return
    
    print(f"\nüîÑ Import en cours : {filepath}")
    print("-" * 40)
    
    try:
        # Test avec DataImporter
        importer = DataImporter()
        result = importer.import_file(filepath)
        
        print("‚úÖ IMPORT R√âUSSI !")
        print(f"\nüìä R√âSUM√â DES DONN√âES :")
        print(f"   ‚Ä¢ Fichier : {Path(filepath).name}")
        print(f"   ‚Ä¢ Nombre de lignes : {len(result.dataframe)}")
        print(f"   ‚Ä¢ Colonnes AR : {len(result.ar_columns)} {result.ar_columns}")
        print(f"   ‚Ä¢ Colonnes AV : {len(result.av_columns)} {result.av_columns}")
        print(f"   ‚Ä¢ Colonnes DIST : {len(result.dist_columns)} {result.dist_columns}")
        print(f"   ‚Ä¢ Point initial : {result.initial_point}")
        print(f"   ‚Ä¢ Point final : {result.final_point}")
        print(f"   ‚Ä¢ Type : {'Ferm√©' if result.initial_point == result.final_point else 'Ouvert'}")
        
        print(f"\nüìã APER√áU DES DONN√âES (5 premi√®res lignes) :")
        print(result.dataframe.head().to_string(index=False))
        
        print(f"\n‚úÖ VALIDATION :")
        if result.validation_result.is_valid:
            print("   ‚Ä¢ Structure : ‚úÖ Valide")
        else:
            print("   ‚Ä¢ Structure : ‚ùå Erreurs d√©tect√©es")
            for error in result.validation_result.errors:
                print(f"     - {error}")
        
        if result.validation_result.warnings:
            print(f"   ‚Ä¢ Avertissements : {len(result.validation_result.warnings)}")
            for warning in result.validation_result.warnings:
                print(f"     ‚ö†Ô∏è  {warning}")
        else:
            print("   ‚Ä¢ Avertissements : Aucun")
        
        print(f"\nüìà M√âTADONN√âES :")
        for key, value in result.metadata.items():
            print(f"   ‚Ä¢ {key} : {value}")
        
        print(f"\nüéØ L'onglet Import Donn√©es fonctionnerait parfaitement avec ce fichier !")
        
    except Exception as e:
        print(f"‚ùå ERREUR D'IMPORT : {str(e)}")
        print(f"\nüîç D√©tails de l'erreur :")
        import traceback
        traceback.print_exc()

def test_quick_import():
    """Test avec la fonction quick_import."""
    print("\n" + "=" * 60)
    print("üöÄ Test de l'import rapide (quick_import)")
    
    filepath = input("Chemin du fichier pour quick_import : ").strip()
    
    if not filepath or not Path(filepath).exists():
        print("‚ùå Fichier non trouv√© !")
        return
    
    try:
        result = quick_import(filepath)
        print("‚úÖ Quick import r√©ussi !")
        print(f"Points : {len(result.dataframe)}")
        
    except Exception as e:
        print(f"‚ùå Erreur quick import : {str(e)}")

if __name__ == "__main__":
    test_import_cli()
    
    if input("\nüöÄ Tester aussi quick_import ? (y/N) : ").lower().startswith('y'):
        test_quick_import()
    
    print("\n‚ú® Tests termin√©s !")