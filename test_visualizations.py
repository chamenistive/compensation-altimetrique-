#!/usr/bin/env python3
"""
Test et d√©monstration du module de visualisation graphique.

Ce script g√©n√®re tous les types de graphiques disponibles pour
le syst√®me de compensation altim√©trique.
"""

import sys
sys.path.append('src')
import numpy as np
from pathlib import Path

from visualizer import LevelingVisualizer, quick_visualization
from data_importer import DataImporter
from calculator import LevelingCalculator
from compensator import LevelingCompensator
from atmospheric_corrections import AtmosphericConditions, create_standard_conditions

def test_visualizations():
    """Test complet des visualisations."""
    
    print("üé® TEST MODULE VISUALISATION")
    print("=" * 50)
    
    # Cr√©er le dossier de sortie
    output_dir = Path("./visualizations_test")
    output_dir.mkdir(exist_ok=True)
    
    # Initialiser le visualiseur
    visualizer = LevelingVisualizer(precision_mm=2.0, output_dir=output_dir)
    
    try:
        # Tentative avec donn√©es r√©elles
        print("üìÅ Chargement des donn√©es r√©elles...")
        importer = DataImporter()
        data = importer.import_file('canal_G1.xlsx')
        
        print(f"‚úÖ Donn√©es charg√©es: {len(data.dataframe)} points")
        
        # Calculs avec corrections atmosph√©riques
        conditions = create_standard_conditions("sahel")
        calculator = LevelingCalculator(
            precision_mm=2.0,
            apply_atmospheric_corrections=True,
            atmospheric_conditions=conditions
        )
        
        calc_results = calculator.calculate_complete_leveling(
            data.dataframe, data.ar_columns, data.av_columns,
            data.dist_columns,
            initial_altitude=518.51872,
            known_final_altitude=502.872
        )
        
        # Compensation
        print("üîß Compensation par moindres carr√©s...")
        
        # Debug des dimensions
        print(f"   Debug: {len(data.dataframe)} points dans dataframe")
        print(f"   Debug: {len(calc_results.altitudes)} altitudes calcul√©es")
        print(f"   Debug: {len(calc_results.height_differences)} d√©nivel√©es")
        
        # Ajuster les distances au nombre r√©el d'observations valides
        valid_observations = [hd for hd in calc_results.height_differences if hd.is_valid]
        print(f"   Debug: {len(valid_observations)} observations valides")
        
        distances = np.array([100.0] * len(valid_observations))
        print(f"   Debug: {len(distances)} distances cr√©√©es")
        
        compensator = LevelingCompensator(precision_mm=2.0)
        comp_results = compensator.compensate(calc_results, distances)
        
        print("‚úÖ Compensation termin√©e!")
        
        # G√©n√©rer les corrections atmosph√©riques pour le rapport
        from atmospheric_corrections import AtmosphericCorrector
        corrector = AtmosphericCorrector()
        atmospheric_corrections = []
        
        for dist in distances[:10]:  # Limiter pour la d√©mo
            corr = corrector.calculate_atmospheric_correction(dist, 0.0, conditions)
            atmospheric_corrections.append(corr)
        
        # G√©n√©rer directement le rapport complet (qui cr√©e tous les graphiques)
        print("\nüìä G√âN√âRATION DU RAPPORT COMPLET...")
        rapport = visualizer.create_complete_report(
            calc_results, comp_results, atmospheric_corrections, distances[:10]
        )
        print(f"‚úÖ Rapport complet: {rapport.name}")
        
        # Statistiques finales
        print(f"\nüìà R√âSULTATS:")
        print(f"   Graphiques cr√©√©s: {len(visualizer.get_created_plots())}")
        print(f"   Dossier de sortie: {output_dir}")
        
        # Liste des fichiers
        print(f"\nüìÅ FICHIERS G√âN√âR√âS:")
        for i, plot_path in enumerate(visualizer.get_created_plots(), 1):
            print(f"   {i}. {plot_path.name}")
        
        return True
        
    except FileNotFoundError:
        print("‚ö†Ô∏è Fichier canal_G1.xlsx non trouv√© - g√©n√©ration avec donn√©es synth√©tiques")
        return test_with_synthetic_data(visualizer)
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def test_with_synthetic_data(visualizer: LevelingVisualizer):
    """Test avec donn√©es synth√©tiques."""
    
    print("\nüîß G√âN√âRATION AVEC DONN√âES SYNTH√âTIQUES")
    print("-" * 40)
    
    # Cr√©er des donn√©es synth√©tiques
    from calculator import AltitudeCalculation, HeightDifference, ClosureAnalysis, CalculationResults
    from calculator import TraverseType, ControlStatistics
    
    # Altitudes synth√©tiques
    altitudes = []
    initial_alt = 100.000
    for i in range(6):
        alt = AltitudeCalculation(
            point_id=f"P{i:03d}",
            altitude_m=initial_alt + i * 0.5 + np.random.normal(0, 0.001),
            cumulative_delta_h=i * 0.5,
            is_reference=(i == 0)
        )
        altitudes.append(alt)
    
    # D√©nivel√©es synth√©tiques
    height_differences = []
    for i in range(5):
        hd = HeightDifference(
            delta_h_m=0.5 + np.random.normal(0, 0.002),
            ar_reading=1.500 + np.random.normal(0, 0.001),
            av_reading=1.000 + np.random.normal(0, 0.001),
            instrument_id=1,
            is_valid=True
        )
        height_differences.append(hd)
    
    # Analyse de fermeture synth√©tique
    closure = ClosureAnalysis(
        traverse_type=TraverseType.CLOSED,
        closure_error_mm=1.5,
        tolerance_mm=4.0,
        is_acceptable=True,
        total_distance_km=1.0,
        error_per_km_mm=1.5
    )
    
    # Statistiques de contr√¥le
    control_stats = ControlStatistics(
        mean_residual_mm=0.1,
        max_residual_mm=2.1,
        std_residual_mm=0.8,
        observations_within_tolerance=5,
        total_observations=5
    )
    
    # R√©sultats des calculs synth√©tiques
    calc_results = CalculationResults(
        altitudes=altitudes,
        height_differences=height_differences,
        closure_analysis=closure,
        control_statistics=control_stats,
        calculation_metadata={}
    )
    
    # G√©n√©rer les graphiques de base
    try:
        # Profil altim√©trique
        plot1 = visualizer.create_altitude_profile(calc_results)
        print(f"‚úÖ Profil altim√©trique: {plot1.name}")
        
        # Analyse de fermeture
        plot2 = visualizer.create_closure_analysis_plot(closure, calc_results)
        print(f"‚úÖ Analyse fermeture: {plot2.name}")
        
        # Corrections atmosph√©riques avec donn√©es synth√©tiques
        distances = np.array([200.0, 150.0, 300.0, 250.0, 180.0])
        plot3 = visualizer.create_atmospheric_corrections_plot([], distances)
        print(f"‚úÖ Corrections atmosph√©riques: {plot3.name}")
        
        print(f"\n‚úÖ Test avec donn√©es synth√©tiques r√©ussi!")
        print(f"üìÅ Fichiers dans: {visualizer.output_dir}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration synth√©tique: {e}")
        return False

def demonstrate_quick_visualization():
    """D√©monstration de la visualisation rapide avec donn√©es diff√©rentes."""
    
    print("\nüöÄ D√âMONSTRATION VISUALISATION RAPIDE (DONN√âES SYNTH√âTIQUES)")
    print("-" * 60)
    
    try:
        # Utiliser des donn√©es synth√©tiques diff√©rentes pour √©viter les doublons
        from calculator import AltitudeCalculation, HeightDifference, ClosureAnalysis, CalculationResults
        from calculator import TraverseType, ControlStatistics
        
        # Cr√©er un petit cheminement synth√©tique
        altitudes = []
        for i in range(4):  # Moins de points que le test principal
            alt = AltitudeCalculation(
                point_id=f"DEMO_{i:02d}",
                altitude_m=200.000 + i * 1.5 + np.random.normal(0, 0.002),
                cumulative_delta_h=i * 1.5,
                is_reference=(i == 0)
            )
            altitudes.append(alt)
        
        # D√©nivel√©es synth√©tiques
        height_differences = []
        for i in range(3):
            hd = HeightDifference(
                delta_h_m=1.5 + np.random.normal(0, 0.003),
                ar_reading=2.000 + np.random.normal(0, 0.001),
                av_reading=0.500 + np.random.normal(0, 0.001),
                instrument_id=1,
                is_valid=True
            )
            height_differences.append(hd)
        
        # Analyse de fermeture synth√©tique
        closure = ClosureAnalysis(
            traverse_type=TraverseType.OPEN,
            closure_error_mm=2.8,
            tolerance_mm=5.0,
            is_acceptable=True,
            total_distance_km=0.6,
            error_per_km_mm=4.7
        )
        
        # Statistiques de contr√¥le
        control_stats = ControlStatistics(
            mean_residual_mm=0.2,
            max_residual_mm=1.8,
            std_residual_mm=0.6,
            observations_within_tolerance=3,
            total_observations=3
        )
        
        # R√©sultats synth√©tiques
        demo_results = CalculationResults(
            altitudes=altitudes,
            height_differences=height_differences,
            closure_analysis=closure,
            control_statistics=control_stats,
            calculation_metadata={"demo": True}
        )
        
        # Visualisation rapide avec donn√©es synth√©tiques
        output_dir = Path("./quick_viz_demo")
        rapport = quick_visualization(demo_results, output_dir=output_dir)
        
        print(f"‚úÖ Visualisation rapide g√©n√©r√©e: {rapport}")
        print(f"üìÅ Dossier: {output_dir}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Visualisation rapide √©chou√©e: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    success = test_visualizations()
    
    if success:
        demonstrate_quick_visualization()
        print(f"\nüéØ TESTS TERMIN√âS AVEC SUCC√àS!")
        print(f"üìÅ Consultez les dossiers 'visualizations_test' et 'quick_viz_demo'")
    else:
        print(f"\n‚ùå TESTS √âCHOU√âS")
        sys.exit(1)